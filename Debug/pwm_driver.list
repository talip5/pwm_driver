
pwm_driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001470  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001530  08001530  00011530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001560  08001560  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001560  08001560  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001560  08001560  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001560  08001560  00011560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001564  08001564  00011564  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001568  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001574  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001574  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002ac7  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000dfb  00000000  00000000  00022afb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000360  00000000  00000000  000238f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002d8  00000000  00000000  00023c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000ea01  00000000  00000000  00023f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000044c8  00000000  00000000  00032931  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005827f  00000000  00000000  00036df9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008f078  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000a2c  00000000  00000000  0008f0c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001518 	.word	0x08001518

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001518 	.word	0x08001518

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 f8e2 	bl	80003ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f826 	bl	8000278 <SystemClock_Config>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  //MX_GPIO_Init();
  /* USER CODE BEGIN 2 */
pwm_init();
 800022c:	f001 f80a 	bl	8001244 <pwm_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
pwm_enable();
 8000230:	f001 f8e6 	bl	8001400 <pwm_enable>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //pwm_sweep1();
	  TIM3->CCR1 = 1;
 8000234:	4b03      	ldr	r3, [pc, #12]	; (8000244 <main+0x24>)
 8000236:	2201      	movs	r2, #1
 8000238:	635a      	str	r2, [r3, #52]	; 0x34
	  	TIM3->CCR2 = 1;
 800023a:	4b02      	ldr	r3, [pc, #8]	; (8000244 <main+0x24>)
 800023c:	2201      	movs	r2, #1
 800023e:	639a      	str	r2, [r3, #56]	; 0x38
	  TIM3->CCR1 = 1;
 8000240:	e7f8      	b.n	8000234 <main+0x14>
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	40000400 	.word	0x40000400

08000248 <TIM3_IRQHandler>:
	int32_t sweep=1;
	pwm_set_duty_cycle(sweep,CHANNEL1);
	pwm_set_duty_cycle(sweep,CHANNEL2);
}

void TIM3_IRQHandler(void){
 8000248:	b580      	push	{r7, lr}
 800024a:	af00      	add	r7, sp, #0
	TIM3->SR &=~(TIM_SR_UIF);
 800024c:	4b08      	ldr	r3, [pc, #32]	; (8000270 <TIM3_IRQHandler+0x28>)
 800024e:	691a      	ldr	r2, [r3, #16]
 8000250:	4b07      	ldr	r3, [pc, #28]	; (8000270 <TIM3_IRQHandler+0x28>)
 8000252:	2101      	movs	r1, #1
 8000254:	438a      	bics	r2, r1
 8000256:	611a      	str	r2, [r3, #16]
	//TIM3->SR &=~(TIM_SR_CC1IF);
	//TIM3->SR &=~(TIM_SR_CC2IF);
	led_PC8();
 8000258:	f001 f8e6 	bl	8001428 <led_PC8>
	GPIOC->ODR ^=GPIO_PIN_8;
 800025c:	4b05      	ldr	r3, [pc, #20]	; (8000274 <TIM3_IRQHandler+0x2c>)
 800025e:	695a      	ldr	r2, [r3, #20]
 8000260:	4b04      	ldr	r3, [pc, #16]	; (8000274 <TIM3_IRQHandler+0x2c>)
 8000262:	2180      	movs	r1, #128	; 0x80
 8000264:	0049      	lsls	r1, r1, #1
 8000266:	404a      	eors	r2, r1
 8000268:	615a      	str	r2, [r3, #20]
	//HAL_Delay(1500);
	//GPIOC->ODR &=~(GPIO_PIN_8);
}
 800026a:	46c0      	nop			; (mov r8, r8)
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}
 8000270:	40000400 	.word	0x40000400
 8000274:	48000800 	.word	0x48000800

08000278 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000278:	b590      	push	{r4, r7, lr}
 800027a:	b091      	sub	sp, #68	; 0x44
 800027c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027e:	2410      	movs	r4, #16
 8000280:	193b      	adds	r3, r7, r4
 8000282:	0018      	movs	r0, r3
 8000284:	2330      	movs	r3, #48	; 0x30
 8000286:	001a      	movs	r2, r3
 8000288:	2100      	movs	r1, #0
 800028a:	f001 f93d 	bl	8001508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800028e:	003b      	movs	r3, r7
 8000290:	0018      	movs	r0, r3
 8000292:	2310      	movs	r3, #16
 8000294:	001a      	movs	r2, r3
 8000296:	2100      	movs	r1, #0
 8000298:	f001 f936 	bl	8001508 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800029c:	0021      	movs	r1, r4
 800029e:	187b      	adds	r3, r7, r1
 80002a0:	2202      	movs	r2, #2
 80002a2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002a4:	187b      	adds	r3, r7, r1
 80002a6:	2201      	movs	r2, #1
 80002a8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002aa:	187b      	adds	r3, r7, r1
 80002ac:	2210      	movs	r2, #16
 80002ae:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002b0:	187b      	adds	r3, r7, r1
 80002b2:	2202      	movs	r2, #2
 80002b4:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002b6:	187b      	adds	r3, r7, r1
 80002b8:	2280      	movs	r2, #128	; 0x80
 80002ba:	0212      	lsls	r2, r2, #8
 80002bc:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80002be:	187b      	adds	r3, r7, r1
 80002c0:	2280      	movs	r2, #128	; 0x80
 80002c2:	0352      	lsls	r2, r2, #13
 80002c4:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002c6:	187b      	adds	r3, r7, r1
 80002c8:	2200      	movs	r2, #0
 80002ca:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002cc:	187b      	adds	r3, r7, r1
 80002ce:	0018      	movs	r0, r3
 80002d0:	f000 f9a4 	bl	800061c <HAL_RCC_OscConfig>
 80002d4:	1e03      	subs	r3, r0, #0
 80002d6:	d001      	beq.n	80002dc <SystemClock_Config+0x64>
  {
    Error_Handler();
 80002d8:	f000 f819 	bl	800030e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002dc:	003b      	movs	r3, r7
 80002de:	2207      	movs	r2, #7
 80002e0:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002e2:	003b      	movs	r3, r7
 80002e4:	2202      	movs	r2, #2
 80002e6:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e8:	003b      	movs	r3, r7
 80002ea:	2200      	movs	r2, #0
 80002ec:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ee:	003b      	movs	r3, r7
 80002f0:	2200      	movs	r2, #0
 80002f2:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002f4:	003b      	movs	r3, r7
 80002f6:	2101      	movs	r1, #1
 80002f8:	0018      	movs	r0, r3
 80002fa:	f000 fcad 	bl	8000c58 <HAL_RCC_ClockConfig>
 80002fe:	1e03      	subs	r3, r0, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000302:	f000 f804 	bl	800030e <Error_Handler>
  }
}
 8000306:	46c0      	nop			; (mov r8, r8)
 8000308:	46bd      	mov	sp, r7
 800030a:	b011      	add	sp, #68	; 0x44
 800030c:	bd90      	pop	{r4, r7, pc}

0800030e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800030e:	b580      	push	{r7, lr}
 8000310:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000312:	b672      	cpsid	i
}
 8000314:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000316:	e7fe      	b.n	8000316 <Error_Handler+0x8>

08000318 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000318:	b580      	push	{r7, lr}
 800031a:	b082      	sub	sp, #8
 800031c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800031e:	4b0f      	ldr	r3, [pc, #60]	; (800035c <HAL_MspInit+0x44>)
 8000320:	699a      	ldr	r2, [r3, #24]
 8000322:	4b0e      	ldr	r3, [pc, #56]	; (800035c <HAL_MspInit+0x44>)
 8000324:	2101      	movs	r1, #1
 8000326:	430a      	orrs	r2, r1
 8000328:	619a      	str	r2, [r3, #24]
 800032a:	4b0c      	ldr	r3, [pc, #48]	; (800035c <HAL_MspInit+0x44>)
 800032c:	699b      	ldr	r3, [r3, #24]
 800032e:	2201      	movs	r2, #1
 8000330:	4013      	ands	r3, r2
 8000332:	607b      	str	r3, [r7, #4]
 8000334:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000336:	4b09      	ldr	r3, [pc, #36]	; (800035c <HAL_MspInit+0x44>)
 8000338:	69da      	ldr	r2, [r3, #28]
 800033a:	4b08      	ldr	r3, [pc, #32]	; (800035c <HAL_MspInit+0x44>)
 800033c:	2180      	movs	r1, #128	; 0x80
 800033e:	0549      	lsls	r1, r1, #21
 8000340:	430a      	orrs	r2, r1
 8000342:	61da      	str	r2, [r3, #28]
 8000344:	4b05      	ldr	r3, [pc, #20]	; (800035c <HAL_MspInit+0x44>)
 8000346:	69da      	ldr	r2, [r3, #28]
 8000348:	2380      	movs	r3, #128	; 0x80
 800034a:	055b      	lsls	r3, r3, #21
 800034c:	4013      	ands	r3, r2
 800034e:	603b      	str	r3, [r7, #0]
 8000350:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000352:	46c0      	nop			; (mov r8, r8)
 8000354:	46bd      	mov	sp, r7
 8000356:	b002      	add	sp, #8
 8000358:	bd80      	pop	{r7, pc}
 800035a:	46c0      	nop			; (mov r8, r8)
 800035c:	40021000 	.word	0x40021000

08000360 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000364:	e7fe      	b.n	8000364 <NMI_Handler+0x4>

08000366 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000366:	b580      	push	{r7, lr}
 8000368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800036a:	e7fe      	b.n	800036a <HardFault_Handler+0x4>

0800036c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000370:	46c0      	nop			; (mov r8, r8)
 8000372:	46bd      	mov	sp, r7
 8000374:	bd80      	pop	{r7, pc}

08000376 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000376:	b580      	push	{r7, lr}
 8000378:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800037a:	46c0      	nop			; (mov r8, r8)
 800037c:	46bd      	mov	sp, r7
 800037e:	bd80      	pop	{r7, pc}

08000380 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000384:	f000 f87a 	bl	800047c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000388:	46c0      	nop			; (mov r8, r8)
 800038a:	46bd      	mov	sp, r7
 800038c:	bd80      	pop	{r7, pc}

0800038e <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800038e:	b580      	push	{r7, lr}
 8000390:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000392:	46c0      	nop			; (mov r8, r8)
 8000394:	46bd      	mov	sp, r7
 8000396:	bd80      	pop	{r7, pc}

08000398 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000398:	480d      	ldr	r0, [pc, #52]	; (80003d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800039a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
  bl  SystemInit
 800039c:	f7ff fff7 	bl	800038e <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80003a0:	480c      	ldr	r0, [pc, #48]	; (80003d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80003a2:	490d      	ldr	r1, [pc, #52]	; (80003d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003a4:	4a0d      	ldr	r2, [pc, #52]	; (80003dc <LoopForever+0xe>)
  movs r3, #0
 80003a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003a8:	e002      	b.n	80003b0 <LoopCopyDataInit>

080003aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003ae:	3304      	adds	r3, #4

080003b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003b4:	d3f9      	bcc.n	80003aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003b6:	4a0a      	ldr	r2, [pc, #40]	; (80003e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80003b8:	4c0a      	ldr	r4, [pc, #40]	; (80003e4 <LoopForever+0x16>)
  movs r3, #0
 80003ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003bc:	e001      	b.n	80003c2 <LoopFillZerobss>

080003be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003c0:	3204      	adds	r2, #4

080003c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003c4:	d3fb      	bcc.n	80003be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003c6:	f001 f87b 	bl	80014c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003ca:	f7ff ff29 	bl	8000220 <main>

080003ce <LoopForever>:

LoopForever:
    b LoopForever
 80003ce:	e7fe      	b.n	80003ce <LoopForever>
  ldr   r0, =_estack
 80003d0:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 80003d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003d8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80003dc:	08001568 	.word	0x08001568
  ldr r2, =_sbss
 80003e0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80003e4:	2000002c 	.word	0x2000002c

080003e8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003e8:	e7fe      	b.n	80003e8 <ADC1_IRQHandler>
	...

080003ec <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80003ec:	b580      	push	{r7, lr}
 80003ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80003f0:	4b07      	ldr	r3, [pc, #28]	; (8000410 <HAL_Init+0x24>)
 80003f2:	681a      	ldr	r2, [r3, #0]
 80003f4:	4b06      	ldr	r3, [pc, #24]	; (8000410 <HAL_Init+0x24>)
 80003f6:	2110      	movs	r1, #16
 80003f8:	430a      	orrs	r2, r1
 80003fa:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80003fc:	2000      	movs	r0, #0
 80003fe:	f000 f809 	bl	8000414 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000402:	f7ff ff89 	bl	8000318 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000406:	2300      	movs	r3, #0
}
 8000408:	0018      	movs	r0, r3
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}
 800040e:	46c0      	nop			; (mov r8, r8)
 8000410:	40022000 	.word	0x40022000

08000414 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000414:	b590      	push	{r4, r7, lr}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800041c:	4b14      	ldr	r3, [pc, #80]	; (8000470 <HAL_InitTick+0x5c>)
 800041e:	681c      	ldr	r4, [r3, #0]
 8000420:	4b14      	ldr	r3, [pc, #80]	; (8000474 <HAL_InitTick+0x60>)
 8000422:	781b      	ldrb	r3, [r3, #0]
 8000424:	0019      	movs	r1, r3
 8000426:	23fa      	movs	r3, #250	; 0xfa
 8000428:	0098      	lsls	r0, r3, #2
 800042a:	f7ff fe6d 	bl	8000108 <__udivsi3>
 800042e:	0003      	movs	r3, r0
 8000430:	0019      	movs	r1, r3
 8000432:	0020      	movs	r0, r4
 8000434:	f7ff fe68 	bl	8000108 <__udivsi3>
 8000438:	0003      	movs	r3, r0
 800043a:	0018      	movs	r0, r3
 800043c:	f000 f8e1 	bl	8000602 <HAL_SYSTICK_Config>
 8000440:	1e03      	subs	r3, r0, #0
 8000442:	d001      	beq.n	8000448 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000444:	2301      	movs	r3, #1
 8000446:	e00f      	b.n	8000468 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	2b03      	cmp	r3, #3
 800044c:	d80b      	bhi.n	8000466 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800044e:	6879      	ldr	r1, [r7, #4]
 8000450:	2301      	movs	r3, #1
 8000452:	425b      	negs	r3, r3
 8000454:	2200      	movs	r2, #0
 8000456:	0018      	movs	r0, r3
 8000458:	f000 f8be 	bl	80005d8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800045c:	4b06      	ldr	r3, [pc, #24]	; (8000478 <HAL_InitTick+0x64>)
 800045e:	687a      	ldr	r2, [r7, #4]
 8000460:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000462:	2300      	movs	r3, #0
 8000464:	e000      	b.n	8000468 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000466:	2301      	movs	r3, #1
}
 8000468:	0018      	movs	r0, r3
 800046a:	46bd      	mov	sp, r7
 800046c:	b003      	add	sp, #12
 800046e:	bd90      	pop	{r4, r7, pc}
 8000470:	20000000 	.word	0x20000000
 8000474:	20000008 	.word	0x20000008
 8000478:	20000004 	.word	0x20000004

0800047c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000480:	4b05      	ldr	r3, [pc, #20]	; (8000498 <HAL_IncTick+0x1c>)
 8000482:	781b      	ldrb	r3, [r3, #0]
 8000484:	001a      	movs	r2, r3
 8000486:	4b05      	ldr	r3, [pc, #20]	; (800049c <HAL_IncTick+0x20>)
 8000488:	681b      	ldr	r3, [r3, #0]
 800048a:	18d2      	adds	r2, r2, r3
 800048c:	4b03      	ldr	r3, [pc, #12]	; (800049c <HAL_IncTick+0x20>)
 800048e:	601a      	str	r2, [r3, #0]
}
 8000490:	46c0      	nop			; (mov r8, r8)
 8000492:	46bd      	mov	sp, r7
 8000494:	bd80      	pop	{r7, pc}
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	20000008 	.word	0x20000008
 800049c:	20000028 	.word	0x20000028

080004a0 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004a0:	b580      	push	{r7, lr}
 80004a2:	af00      	add	r7, sp, #0
  return uwTick;
 80004a4:	4b02      	ldr	r3, [pc, #8]	; (80004b0 <HAL_GetTick+0x10>)
 80004a6:	681b      	ldr	r3, [r3, #0]
}
 80004a8:	0018      	movs	r0, r3
 80004aa:	46bd      	mov	sp, r7
 80004ac:	bd80      	pop	{r7, pc}
 80004ae:	46c0      	nop			; (mov r8, r8)
 80004b0:	20000028 	.word	0x20000028

080004b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004b4:	b590      	push	{r4, r7, lr}
 80004b6:	b083      	sub	sp, #12
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	0002      	movs	r2, r0
 80004bc:	6039      	str	r1, [r7, #0]
 80004be:	1dfb      	adds	r3, r7, #7
 80004c0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80004c2:	1dfb      	adds	r3, r7, #7
 80004c4:	781b      	ldrb	r3, [r3, #0]
 80004c6:	2b7f      	cmp	r3, #127	; 0x7f
 80004c8:	d828      	bhi.n	800051c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80004ca:	4a2f      	ldr	r2, [pc, #188]	; (8000588 <__NVIC_SetPriority+0xd4>)
 80004cc:	1dfb      	adds	r3, r7, #7
 80004ce:	781b      	ldrb	r3, [r3, #0]
 80004d0:	b25b      	sxtb	r3, r3
 80004d2:	089b      	lsrs	r3, r3, #2
 80004d4:	33c0      	adds	r3, #192	; 0xc0
 80004d6:	009b      	lsls	r3, r3, #2
 80004d8:	589b      	ldr	r3, [r3, r2]
 80004da:	1dfa      	adds	r2, r7, #7
 80004dc:	7812      	ldrb	r2, [r2, #0]
 80004de:	0011      	movs	r1, r2
 80004e0:	2203      	movs	r2, #3
 80004e2:	400a      	ands	r2, r1
 80004e4:	00d2      	lsls	r2, r2, #3
 80004e6:	21ff      	movs	r1, #255	; 0xff
 80004e8:	4091      	lsls	r1, r2
 80004ea:	000a      	movs	r2, r1
 80004ec:	43d2      	mvns	r2, r2
 80004ee:	401a      	ands	r2, r3
 80004f0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80004f2:	683b      	ldr	r3, [r7, #0]
 80004f4:	019b      	lsls	r3, r3, #6
 80004f6:	22ff      	movs	r2, #255	; 0xff
 80004f8:	401a      	ands	r2, r3
 80004fa:	1dfb      	adds	r3, r7, #7
 80004fc:	781b      	ldrb	r3, [r3, #0]
 80004fe:	0018      	movs	r0, r3
 8000500:	2303      	movs	r3, #3
 8000502:	4003      	ands	r3, r0
 8000504:	00db      	lsls	r3, r3, #3
 8000506:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000508:	481f      	ldr	r0, [pc, #124]	; (8000588 <__NVIC_SetPriority+0xd4>)
 800050a:	1dfb      	adds	r3, r7, #7
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	b25b      	sxtb	r3, r3
 8000510:	089b      	lsrs	r3, r3, #2
 8000512:	430a      	orrs	r2, r1
 8000514:	33c0      	adds	r3, #192	; 0xc0
 8000516:	009b      	lsls	r3, r3, #2
 8000518:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800051a:	e031      	b.n	8000580 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800051c:	4a1b      	ldr	r2, [pc, #108]	; (800058c <__NVIC_SetPriority+0xd8>)
 800051e:	1dfb      	adds	r3, r7, #7
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	0019      	movs	r1, r3
 8000524:	230f      	movs	r3, #15
 8000526:	400b      	ands	r3, r1
 8000528:	3b08      	subs	r3, #8
 800052a:	089b      	lsrs	r3, r3, #2
 800052c:	3306      	adds	r3, #6
 800052e:	009b      	lsls	r3, r3, #2
 8000530:	18d3      	adds	r3, r2, r3
 8000532:	3304      	adds	r3, #4
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	1dfa      	adds	r2, r7, #7
 8000538:	7812      	ldrb	r2, [r2, #0]
 800053a:	0011      	movs	r1, r2
 800053c:	2203      	movs	r2, #3
 800053e:	400a      	ands	r2, r1
 8000540:	00d2      	lsls	r2, r2, #3
 8000542:	21ff      	movs	r1, #255	; 0xff
 8000544:	4091      	lsls	r1, r2
 8000546:	000a      	movs	r2, r1
 8000548:	43d2      	mvns	r2, r2
 800054a:	401a      	ands	r2, r3
 800054c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800054e:	683b      	ldr	r3, [r7, #0]
 8000550:	019b      	lsls	r3, r3, #6
 8000552:	22ff      	movs	r2, #255	; 0xff
 8000554:	401a      	ands	r2, r3
 8000556:	1dfb      	adds	r3, r7, #7
 8000558:	781b      	ldrb	r3, [r3, #0]
 800055a:	0018      	movs	r0, r3
 800055c:	2303      	movs	r3, #3
 800055e:	4003      	ands	r3, r0
 8000560:	00db      	lsls	r3, r3, #3
 8000562:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000564:	4809      	ldr	r0, [pc, #36]	; (800058c <__NVIC_SetPriority+0xd8>)
 8000566:	1dfb      	adds	r3, r7, #7
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	001c      	movs	r4, r3
 800056c:	230f      	movs	r3, #15
 800056e:	4023      	ands	r3, r4
 8000570:	3b08      	subs	r3, #8
 8000572:	089b      	lsrs	r3, r3, #2
 8000574:	430a      	orrs	r2, r1
 8000576:	3306      	adds	r3, #6
 8000578:	009b      	lsls	r3, r3, #2
 800057a:	18c3      	adds	r3, r0, r3
 800057c:	3304      	adds	r3, #4
 800057e:	601a      	str	r2, [r3, #0]
}
 8000580:	46c0      	nop			; (mov r8, r8)
 8000582:	46bd      	mov	sp, r7
 8000584:	b003      	add	sp, #12
 8000586:	bd90      	pop	{r4, r7, pc}
 8000588:	e000e100 	.word	0xe000e100
 800058c:	e000ed00 	.word	0xe000ed00

08000590 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	1e5a      	subs	r2, r3, #1
 800059c:	2380      	movs	r3, #128	; 0x80
 800059e:	045b      	lsls	r3, r3, #17
 80005a0:	429a      	cmp	r2, r3
 80005a2:	d301      	bcc.n	80005a8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80005a4:	2301      	movs	r3, #1
 80005a6:	e010      	b.n	80005ca <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005a8:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <SysTick_Config+0x44>)
 80005aa:	687a      	ldr	r2, [r7, #4]
 80005ac:	3a01      	subs	r2, #1
 80005ae:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80005b0:	2301      	movs	r3, #1
 80005b2:	425b      	negs	r3, r3
 80005b4:	2103      	movs	r1, #3
 80005b6:	0018      	movs	r0, r3
 80005b8:	f7ff ff7c 	bl	80004b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005bc:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <SysTick_Config+0x44>)
 80005be:	2200      	movs	r2, #0
 80005c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005c2:	4b04      	ldr	r3, [pc, #16]	; (80005d4 <SysTick_Config+0x44>)
 80005c4:	2207      	movs	r2, #7
 80005c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	0018      	movs	r0, r3
 80005cc:	46bd      	mov	sp, r7
 80005ce:	b002      	add	sp, #8
 80005d0:	bd80      	pop	{r7, pc}
 80005d2:	46c0      	nop			; (mov r8, r8)
 80005d4:	e000e010 	.word	0xe000e010

080005d8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	60b9      	str	r1, [r7, #8]
 80005e0:	607a      	str	r2, [r7, #4]
 80005e2:	210f      	movs	r1, #15
 80005e4:	187b      	adds	r3, r7, r1
 80005e6:	1c02      	adds	r2, r0, #0
 80005e8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80005ea:	68ba      	ldr	r2, [r7, #8]
 80005ec:	187b      	adds	r3, r7, r1
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	b25b      	sxtb	r3, r3
 80005f2:	0011      	movs	r1, r2
 80005f4:	0018      	movs	r0, r3
 80005f6:	f7ff ff5d 	bl	80004b4 <__NVIC_SetPriority>
}
 80005fa:	46c0      	nop			; (mov r8, r8)
 80005fc:	46bd      	mov	sp, r7
 80005fe:	b004      	add	sp, #16
 8000600:	bd80      	pop	{r7, pc}

08000602 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000602:	b580      	push	{r7, lr}
 8000604:	b082      	sub	sp, #8
 8000606:	af00      	add	r7, sp, #0
 8000608:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	0018      	movs	r0, r3
 800060e:	f7ff ffbf 	bl	8000590 <SysTick_Config>
 8000612:	0003      	movs	r3, r0
}
 8000614:	0018      	movs	r0, r3
 8000616:	46bd      	mov	sp, r7
 8000618:	b002      	add	sp, #8
 800061a:	bd80      	pop	{r7, pc}

0800061c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af00      	add	r7, sp, #0
 8000622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d101      	bne.n	800062e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800062a:	2301      	movs	r3, #1
 800062c:	e305      	b.n	8000c3a <HAL_RCC_OscConfig+0x61e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2201      	movs	r2, #1
 8000634:	4013      	ands	r3, r2
 8000636:	d100      	bne.n	800063a <HAL_RCC_OscConfig+0x1e>
 8000638:	e08d      	b.n	8000756 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800063a:	4bc5      	ldr	r3, [pc, #788]	; (8000950 <HAL_RCC_OscConfig+0x334>)
 800063c:	685b      	ldr	r3, [r3, #4]
 800063e:	220c      	movs	r2, #12
 8000640:	4013      	ands	r3, r2
 8000642:	2b04      	cmp	r3, #4
 8000644:	d00e      	beq.n	8000664 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000646:	4bc2      	ldr	r3, [pc, #776]	; (8000950 <HAL_RCC_OscConfig+0x334>)
 8000648:	685b      	ldr	r3, [r3, #4]
 800064a:	220c      	movs	r2, #12
 800064c:	4013      	ands	r3, r2
 800064e:	2b08      	cmp	r3, #8
 8000650:	d116      	bne.n	8000680 <HAL_RCC_OscConfig+0x64>
 8000652:	4bbf      	ldr	r3, [pc, #764]	; (8000950 <HAL_RCC_OscConfig+0x334>)
 8000654:	685a      	ldr	r2, [r3, #4]
 8000656:	23c0      	movs	r3, #192	; 0xc0
 8000658:	025b      	lsls	r3, r3, #9
 800065a:	401a      	ands	r2, r3
 800065c:	2380      	movs	r3, #128	; 0x80
 800065e:	025b      	lsls	r3, r3, #9
 8000660:	429a      	cmp	r2, r3
 8000662:	d10d      	bne.n	8000680 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000664:	4bba      	ldr	r3, [pc, #744]	; (8000950 <HAL_RCC_OscConfig+0x334>)
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	2380      	movs	r3, #128	; 0x80
 800066a:	029b      	lsls	r3, r3, #10
 800066c:	4013      	ands	r3, r2
 800066e:	d100      	bne.n	8000672 <HAL_RCC_OscConfig+0x56>
 8000670:	e070      	b.n	8000754 <HAL_RCC_OscConfig+0x138>
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	685b      	ldr	r3, [r3, #4]
 8000676:	2b00      	cmp	r3, #0
 8000678:	d000      	beq.n	800067c <HAL_RCC_OscConfig+0x60>
 800067a:	e06b      	b.n	8000754 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800067c:	2301      	movs	r3, #1
 800067e:	e2dc      	b.n	8000c3a <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	685b      	ldr	r3, [r3, #4]
 8000684:	2b01      	cmp	r3, #1
 8000686:	d107      	bne.n	8000698 <HAL_RCC_OscConfig+0x7c>
 8000688:	4bb1      	ldr	r3, [pc, #708]	; (8000950 <HAL_RCC_OscConfig+0x334>)
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	4bb0      	ldr	r3, [pc, #704]	; (8000950 <HAL_RCC_OscConfig+0x334>)
 800068e:	2180      	movs	r1, #128	; 0x80
 8000690:	0249      	lsls	r1, r1, #9
 8000692:	430a      	orrs	r2, r1
 8000694:	601a      	str	r2, [r3, #0]
 8000696:	e02f      	b.n	80006f8 <HAL_RCC_OscConfig+0xdc>
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	685b      	ldr	r3, [r3, #4]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d10c      	bne.n	80006ba <HAL_RCC_OscConfig+0x9e>
 80006a0:	4bab      	ldr	r3, [pc, #684]	; (8000950 <HAL_RCC_OscConfig+0x334>)
 80006a2:	681a      	ldr	r2, [r3, #0]
 80006a4:	4baa      	ldr	r3, [pc, #680]	; (8000950 <HAL_RCC_OscConfig+0x334>)
 80006a6:	49ab      	ldr	r1, [pc, #684]	; (8000954 <HAL_RCC_OscConfig+0x338>)
 80006a8:	400a      	ands	r2, r1
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	4ba8      	ldr	r3, [pc, #672]	; (8000950 <HAL_RCC_OscConfig+0x334>)
 80006ae:	681a      	ldr	r2, [r3, #0]
 80006b0:	4ba7      	ldr	r3, [pc, #668]	; (8000950 <HAL_RCC_OscConfig+0x334>)
 80006b2:	49a9      	ldr	r1, [pc, #676]	; (8000958 <HAL_RCC_OscConfig+0x33c>)
 80006b4:	400a      	ands	r2, r1
 80006b6:	601a      	str	r2, [r3, #0]
 80006b8:	e01e      	b.n	80006f8 <HAL_RCC_OscConfig+0xdc>
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	685b      	ldr	r3, [r3, #4]
 80006be:	2b05      	cmp	r3, #5
 80006c0:	d10e      	bne.n	80006e0 <HAL_RCC_OscConfig+0xc4>
 80006c2:	4ba3      	ldr	r3, [pc, #652]	; (8000950 <HAL_RCC_OscConfig+0x334>)
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	4ba2      	ldr	r3, [pc, #648]	; (8000950 <HAL_RCC_OscConfig+0x334>)
 80006c8:	2180      	movs	r1, #128	; 0x80
 80006ca:	02c9      	lsls	r1, r1, #11
 80006cc:	430a      	orrs	r2, r1
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	4b9f      	ldr	r3, [pc, #636]	; (8000950 <HAL_RCC_OscConfig+0x334>)
 80006d2:	681a      	ldr	r2, [r3, #0]
 80006d4:	4b9e      	ldr	r3, [pc, #632]	; (8000950 <HAL_RCC_OscConfig+0x334>)
 80006d6:	2180      	movs	r1, #128	; 0x80
 80006d8:	0249      	lsls	r1, r1, #9
 80006da:	430a      	orrs	r2, r1
 80006dc:	601a      	str	r2, [r3, #0]
 80006de:	e00b      	b.n	80006f8 <HAL_RCC_OscConfig+0xdc>
 80006e0:	4b9b      	ldr	r3, [pc, #620]	; (8000950 <HAL_RCC_OscConfig+0x334>)
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4b9a      	ldr	r3, [pc, #616]	; (8000950 <HAL_RCC_OscConfig+0x334>)
 80006e6:	499b      	ldr	r1, [pc, #620]	; (8000954 <HAL_RCC_OscConfig+0x338>)
 80006e8:	400a      	ands	r2, r1
 80006ea:	601a      	str	r2, [r3, #0]
 80006ec:	4b98      	ldr	r3, [pc, #608]	; (8000950 <HAL_RCC_OscConfig+0x334>)
 80006ee:	681a      	ldr	r2, [r3, #0]
 80006f0:	4b97      	ldr	r3, [pc, #604]	; (8000950 <HAL_RCC_OscConfig+0x334>)
 80006f2:	4999      	ldr	r1, [pc, #612]	; (8000958 <HAL_RCC_OscConfig+0x33c>)
 80006f4:	400a      	ands	r2, r1
 80006f6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	685b      	ldr	r3, [r3, #4]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d014      	beq.n	800072a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000700:	f7ff fece 	bl	80004a0 <HAL_GetTick>
 8000704:	0003      	movs	r3, r0
 8000706:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000708:	e008      	b.n	800071c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800070a:	f7ff fec9 	bl	80004a0 <HAL_GetTick>
 800070e:	0002      	movs	r2, r0
 8000710:	69bb      	ldr	r3, [r7, #24]
 8000712:	1ad3      	subs	r3, r2, r3
 8000714:	2b64      	cmp	r3, #100	; 0x64
 8000716:	d901      	bls.n	800071c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8000718:	2303      	movs	r3, #3
 800071a:	e28e      	b.n	8000c3a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800071c:	4b8c      	ldr	r3, [pc, #560]	; (8000950 <HAL_RCC_OscConfig+0x334>)
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	2380      	movs	r3, #128	; 0x80
 8000722:	029b      	lsls	r3, r3, #10
 8000724:	4013      	ands	r3, r2
 8000726:	d0f0      	beq.n	800070a <HAL_RCC_OscConfig+0xee>
 8000728:	e015      	b.n	8000756 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800072a:	f7ff feb9 	bl	80004a0 <HAL_GetTick>
 800072e:	0003      	movs	r3, r0
 8000730:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000732:	e008      	b.n	8000746 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000734:	f7ff feb4 	bl	80004a0 <HAL_GetTick>
 8000738:	0002      	movs	r2, r0
 800073a:	69bb      	ldr	r3, [r7, #24]
 800073c:	1ad3      	subs	r3, r2, r3
 800073e:	2b64      	cmp	r3, #100	; 0x64
 8000740:	d901      	bls.n	8000746 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8000742:	2303      	movs	r3, #3
 8000744:	e279      	b.n	8000c3a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000746:	4b82      	ldr	r3, [pc, #520]	; (8000950 <HAL_RCC_OscConfig+0x334>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	2380      	movs	r3, #128	; 0x80
 800074c:	029b      	lsls	r3, r3, #10
 800074e:	4013      	ands	r3, r2
 8000750:	d1f0      	bne.n	8000734 <HAL_RCC_OscConfig+0x118>
 8000752:	e000      	b.n	8000756 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000754:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	2202      	movs	r2, #2
 800075c:	4013      	ands	r3, r2
 800075e:	d100      	bne.n	8000762 <HAL_RCC_OscConfig+0x146>
 8000760:	e06c      	b.n	800083c <HAL_RCC_OscConfig+0x220>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000762:	4b7b      	ldr	r3, [pc, #492]	; (8000950 <HAL_RCC_OscConfig+0x334>)
 8000764:	685b      	ldr	r3, [r3, #4]
 8000766:	220c      	movs	r2, #12
 8000768:	4013      	ands	r3, r2
 800076a:	d00e      	beq.n	800078a <HAL_RCC_OscConfig+0x16e>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800076c:	4b78      	ldr	r3, [pc, #480]	; (8000950 <HAL_RCC_OscConfig+0x334>)
 800076e:	685b      	ldr	r3, [r3, #4]
 8000770:	220c      	movs	r2, #12
 8000772:	4013      	ands	r3, r2
 8000774:	2b08      	cmp	r3, #8
 8000776:	d11f      	bne.n	80007b8 <HAL_RCC_OscConfig+0x19c>
 8000778:	4b75      	ldr	r3, [pc, #468]	; (8000950 <HAL_RCC_OscConfig+0x334>)
 800077a:	685a      	ldr	r2, [r3, #4]
 800077c:	23c0      	movs	r3, #192	; 0xc0
 800077e:	025b      	lsls	r3, r3, #9
 8000780:	401a      	ands	r2, r3
 8000782:	2380      	movs	r3, #128	; 0x80
 8000784:	021b      	lsls	r3, r3, #8
 8000786:	429a      	cmp	r2, r3
 8000788:	d116      	bne.n	80007b8 <HAL_RCC_OscConfig+0x19c>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800078a:	4b71      	ldr	r3, [pc, #452]	; (8000950 <HAL_RCC_OscConfig+0x334>)
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	2202      	movs	r2, #2
 8000790:	4013      	ands	r3, r2
 8000792:	d005      	beq.n	80007a0 <HAL_RCC_OscConfig+0x184>
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	68db      	ldr	r3, [r3, #12]
 8000798:	2b01      	cmp	r3, #1
 800079a:	d001      	beq.n	80007a0 <HAL_RCC_OscConfig+0x184>
      {
        return HAL_ERROR;
 800079c:	2301      	movs	r3, #1
 800079e:	e24c      	b.n	8000c3a <HAL_RCC_OscConfig+0x61e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80007a0:	4b6b      	ldr	r3, [pc, #428]	; (8000950 <HAL_RCC_OscConfig+0x334>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	22f8      	movs	r2, #248	; 0xf8
 80007a6:	4393      	bics	r3, r2
 80007a8:	0019      	movs	r1, r3
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	691b      	ldr	r3, [r3, #16]
 80007ae:	00da      	lsls	r2, r3, #3
 80007b0:	4b67      	ldr	r3, [pc, #412]	; (8000950 <HAL_RCC_OscConfig+0x334>)
 80007b2:	430a      	orrs	r2, r1
 80007b4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80007b6:	e041      	b.n	800083c <HAL_RCC_OscConfig+0x220>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	68db      	ldr	r3, [r3, #12]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d024      	beq.n	800080a <HAL_RCC_OscConfig+0x1ee>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80007c0:	4b63      	ldr	r3, [pc, #396]	; (8000950 <HAL_RCC_OscConfig+0x334>)
 80007c2:	681a      	ldr	r2, [r3, #0]
 80007c4:	4b62      	ldr	r3, [pc, #392]	; (8000950 <HAL_RCC_OscConfig+0x334>)
 80007c6:	2101      	movs	r1, #1
 80007c8:	430a      	orrs	r2, r1
 80007ca:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80007cc:	f7ff fe68 	bl	80004a0 <HAL_GetTick>
 80007d0:	0003      	movs	r3, r0
 80007d2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80007d4:	e008      	b.n	80007e8 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80007d6:	f7ff fe63 	bl	80004a0 <HAL_GetTick>
 80007da:	0002      	movs	r2, r0
 80007dc:	69bb      	ldr	r3, [r7, #24]
 80007de:	1ad3      	subs	r3, r2, r3
 80007e0:	2b02      	cmp	r3, #2
 80007e2:	d901      	bls.n	80007e8 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 80007e4:	2303      	movs	r3, #3
 80007e6:	e228      	b.n	8000c3a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80007e8:	4b59      	ldr	r3, [pc, #356]	; (8000950 <HAL_RCC_OscConfig+0x334>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	2202      	movs	r2, #2
 80007ee:	4013      	ands	r3, r2
 80007f0:	d0f1      	beq.n	80007d6 <HAL_RCC_OscConfig+0x1ba>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80007f2:	4b57      	ldr	r3, [pc, #348]	; (8000950 <HAL_RCC_OscConfig+0x334>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	22f8      	movs	r2, #248	; 0xf8
 80007f8:	4393      	bics	r3, r2
 80007fa:	0019      	movs	r1, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	691b      	ldr	r3, [r3, #16]
 8000800:	00da      	lsls	r2, r3, #3
 8000802:	4b53      	ldr	r3, [pc, #332]	; (8000950 <HAL_RCC_OscConfig+0x334>)
 8000804:	430a      	orrs	r2, r1
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	e018      	b.n	800083c <HAL_RCC_OscConfig+0x220>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800080a:	4b51      	ldr	r3, [pc, #324]	; (8000950 <HAL_RCC_OscConfig+0x334>)
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	4b50      	ldr	r3, [pc, #320]	; (8000950 <HAL_RCC_OscConfig+0x334>)
 8000810:	2101      	movs	r1, #1
 8000812:	438a      	bics	r2, r1
 8000814:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000816:	f7ff fe43 	bl	80004a0 <HAL_GetTick>
 800081a:	0003      	movs	r3, r0
 800081c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800081e:	e008      	b.n	8000832 <HAL_RCC_OscConfig+0x216>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000820:	f7ff fe3e 	bl	80004a0 <HAL_GetTick>
 8000824:	0002      	movs	r2, r0
 8000826:	69bb      	ldr	r3, [r7, #24]
 8000828:	1ad3      	subs	r3, r2, r3
 800082a:	2b02      	cmp	r3, #2
 800082c:	d901      	bls.n	8000832 <HAL_RCC_OscConfig+0x216>
          {
            return HAL_TIMEOUT;
 800082e:	2303      	movs	r3, #3
 8000830:	e203      	b.n	8000c3a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000832:	4b47      	ldr	r3, [pc, #284]	; (8000950 <HAL_RCC_OscConfig+0x334>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	2202      	movs	r2, #2
 8000838:	4013      	ands	r3, r2
 800083a:	d1f1      	bne.n	8000820 <HAL_RCC_OscConfig+0x204>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	2208      	movs	r2, #8
 8000842:	4013      	ands	r3, r2
 8000844:	d036      	beq.n	80008b4 <HAL_RCC_OscConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	69db      	ldr	r3, [r3, #28]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d019      	beq.n	8000882 <HAL_RCC_OscConfig+0x266>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800084e:	4b40      	ldr	r3, [pc, #256]	; (8000950 <HAL_RCC_OscConfig+0x334>)
 8000850:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000852:	4b3f      	ldr	r3, [pc, #252]	; (8000950 <HAL_RCC_OscConfig+0x334>)
 8000854:	2101      	movs	r1, #1
 8000856:	430a      	orrs	r2, r1
 8000858:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800085a:	f7ff fe21 	bl	80004a0 <HAL_GetTick>
 800085e:	0003      	movs	r3, r0
 8000860:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000862:	e008      	b.n	8000876 <HAL_RCC_OscConfig+0x25a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000864:	f7ff fe1c 	bl	80004a0 <HAL_GetTick>
 8000868:	0002      	movs	r2, r0
 800086a:	69bb      	ldr	r3, [r7, #24]
 800086c:	1ad3      	subs	r3, r2, r3
 800086e:	2b02      	cmp	r3, #2
 8000870:	d901      	bls.n	8000876 <HAL_RCC_OscConfig+0x25a>
        {
          return HAL_TIMEOUT;
 8000872:	2303      	movs	r3, #3
 8000874:	e1e1      	b.n	8000c3a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000876:	4b36      	ldr	r3, [pc, #216]	; (8000950 <HAL_RCC_OscConfig+0x334>)
 8000878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800087a:	2202      	movs	r2, #2
 800087c:	4013      	ands	r3, r2
 800087e:	d0f1      	beq.n	8000864 <HAL_RCC_OscConfig+0x248>
 8000880:	e018      	b.n	80008b4 <HAL_RCC_OscConfig+0x298>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000882:	4b33      	ldr	r3, [pc, #204]	; (8000950 <HAL_RCC_OscConfig+0x334>)
 8000884:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000886:	4b32      	ldr	r3, [pc, #200]	; (8000950 <HAL_RCC_OscConfig+0x334>)
 8000888:	2101      	movs	r1, #1
 800088a:	438a      	bics	r2, r1
 800088c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800088e:	f7ff fe07 	bl	80004a0 <HAL_GetTick>
 8000892:	0003      	movs	r3, r0
 8000894:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000896:	e008      	b.n	80008aa <HAL_RCC_OscConfig+0x28e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000898:	f7ff fe02 	bl	80004a0 <HAL_GetTick>
 800089c:	0002      	movs	r2, r0
 800089e:	69bb      	ldr	r3, [r7, #24]
 80008a0:	1ad3      	subs	r3, r2, r3
 80008a2:	2b02      	cmp	r3, #2
 80008a4:	d901      	bls.n	80008aa <HAL_RCC_OscConfig+0x28e>
        {
          return HAL_TIMEOUT;
 80008a6:	2303      	movs	r3, #3
 80008a8:	e1c7      	b.n	8000c3a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80008aa:	4b29      	ldr	r3, [pc, #164]	; (8000950 <HAL_RCC_OscConfig+0x334>)
 80008ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ae:	2202      	movs	r2, #2
 80008b0:	4013      	ands	r3, r2
 80008b2:	d1f1      	bne.n	8000898 <HAL_RCC_OscConfig+0x27c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	2204      	movs	r2, #4
 80008ba:	4013      	ands	r3, r2
 80008bc:	d100      	bne.n	80008c0 <HAL_RCC_OscConfig+0x2a4>
 80008be:	e0b5      	b.n	8000a2c <HAL_RCC_OscConfig+0x410>
  {
    FlagStatus       pwrclkchanged = RESET;
 80008c0:	201f      	movs	r0, #31
 80008c2:	183b      	adds	r3, r7, r0
 80008c4:	2200      	movs	r2, #0
 80008c6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80008c8:	4b21      	ldr	r3, [pc, #132]	; (8000950 <HAL_RCC_OscConfig+0x334>)
 80008ca:	69da      	ldr	r2, [r3, #28]
 80008cc:	2380      	movs	r3, #128	; 0x80
 80008ce:	055b      	lsls	r3, r3, #21
 80008d0:	4013      	ands	r3, r2
 80008d2:	d110      	bne.n	80008f6 <HAL_RCC_OscConfig+0x2da>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80008d4:	4b1e      	ldr	r3, [pc, #120]	; (8000950 <HAL_RCC_OscConfig+0x334>)
 80008d6:	69da      	ldr	r2, [r3, #28]
 80008d8:	4b1d      	ldr	r3, [pc, #116]	; (8000950 <HAL_RCC_OscConfig+0x334>)
 80008da:	2180      	movs	r1, #128	; 0x80
 80008dc:	0549      	lsls	r1, r1, #21
 80008de:	430a      	orrs	r2, r1
 80008e0:	61da      	str	r2, [r3, #28]
 80008e2:	4b1b      	ldr	r3, [pc, #108]	; (8000950 <HAL_RCC_OscConfig+0x334>)
 80008e4:	69da      	ldr	r2, [r3, #28]
 80008e6:	2380      	movs	r3, #128	; 0x80
 80008e8:	055b      	lsls	r3, r3, #21
 80008ea:	4013      	ands	r3, r2
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80008f0:	183b      	adds	r3, r7, r0
 80008f2:	2201      	movs	r2, #1
 80008f4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80008f6:	4b19      	ldr	r3, [pc, #100]	; (800095c <HAL_RCC_OscConfig+0x340>)
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	2380      	movs	r3, #128	; 0x80
 80008fc:	005b      	lsls	r3, r3, #1
 80008fe:	4013      	ands	r3, r2
 8000900:	d11a      	bne.n	8000938 <HAL_RCC_OscConfig+0x31c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000902:	4b16      	ldr	r3, [pc, #88]	; (800095c <HAL_RCC_OscConfig+0x340>)
 8000904:	681a      	ldr	r2, [r3, #0]
 8000906:	4b15      	ldr	r3, [pc, #84]	; (800095c <HAL_RCC_OscConfig+0x340>)
 8000908:	2180      	movs	r1, #128	; 0x80
 800090a:	0049      	lsls	r1, r1, #1
 800090c:	430a      	orrs	r2, r1
 800090e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000910:	f7ff fdc6 	bl	80004a0 <HAL_GetTick>
 8000914:	0003      	movs	r3, r0
 8000916:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000918:	e008      	b.n	800092c <HAL_RCC_OscConfig+0x310>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800091a:	f7ff fdc1 	bl	80004a0 <HAL_GetTick>
 800091e:	0002      	movs	r2, r0
 8000920:	69bb      	ldr	r3, [r7, #24]
 8000922:	1ad3      	subs	r3, r2, r3
 8000924:	2b64      	cmp	r3, #100	; 0x64
 8000926:	d901      	bls.n	800092c <HAL_RCC_OscConfig+0x310>
        {
          return HAL_TIMEOUT;
 8000928:	2303      	movs	r3, #3
 800092a:	e186      	b.n	8000c3a <HAL_RCC_OscConfig+0x61e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800092c:	4b0b      	ldr	r3, [pc, #44]	; (800095c <HAL_RCC_OscConfig+0x340>)
 800092e:	681a      	ldr	r2, [r3, #0]
 8000930:	2380      	movs	r3, #128	; 0x80
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	4013      	ands	r3, r2
 8000936:	d0f0      	beq.n	800091a <HAL_RCC_OscConfig+0x2fe>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	689b      	ldr	r3, [r3, #8]
 800093c:	2b01      	cmp	r3, #1
 800093e:	d10f      	bne.n	8000960 <HAL_RCC_OscConfig+0x344>
 8000940:	4b03      	ldr	r3, [pc, #12]	; (8000950 <HAL_RCC_OscConfig+0x334>)
 8000942:	6a1a      	ldr	r2, [r3, #32]
 8000944:	4b02      	ldr	r3, [pc, #8]	; (8000950 <HAL_RCC_OscConfig+0x334>)
 8000946:	2101      	movs	r1, #1
 8000948:	430a      	orrs	r2, r1
 800094a:	621a      	str	r2, [r3, #32]
 800094c:	e036      	b.n	80009bc <HAL_RCC_OscConfig+0x3a0>
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	40021000 	.word	0x40021000
 8000954:	fffeffff 	.word	0xfffeffff
 8000958:	fffbffff 	.word	0xfffbffff
 800095c:	40007000 	.word	0x40007000
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	689b      	ldr	r3, [r3, #8]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d10c      	bne.n	8000982 <HAL_RCC_OscConfig+0x366>
 8000968:	4bb6      	ldr	r3, [pc, #728]	; (8000c44 <HAL_RCC_OscConfig+0x628>)
 800096a:	6a1a      	ldr	r2, [r3, #32]
 800096c:	4bb5      	ldr	r3, [pc, #724]	; (8000c44 <HAL_RCC_OscConfig+0x628>)
 800096e:	2101      	movs	r1, #1
 8000970:	438a      	bics	r2, r1
 8000972:	621a      	str	r2, [r3, #32]
 8000974:	4bb3      	ldr	r3, [pc, #716]	; (8000c44 <HAL_RCC_OscConfig+0x628>)
 8000976:	6a1a      	ldr	r2, [r3, #32]
 8000978:	4bb2      	ldr	r3, [pc, #712]	; (8000c44 <HAL_RCC_OscConfig+0x628>)
 800097a:	2104      	movs	r1, #4
 800097c:	438a      	bics	r2, r1
 800097e:	621a      	str	r2, [r3, #32]
 8000980:	e01c      	b.n	80009bc <HAL_RCC_OscConfig+0x3a0>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	689b      	ldr	r3, [r3, #8]
 8000986:	2b05      	cmp	r3, #5
 8000988:	d10c      	bne.n	80009a4 <HAL_RCC_OscConfig+0x388>
 800098a:	4bae      	ldr	r3, [pc, #696]	; (8000c44 <HAL_RCC_OscConfig+0x628>)
 800098c:	6a1a      	ldr	r2, [r3, #32]
 800098e:	4bad      	ldr	r3, [pc, #692]	; (8000c44 <HAL_RCC_OscConfig+0x628>)
 8000990:	2104      	movs	r1, #4
 8000992:	430a      	orrs	r2, r1
 8000994:	621a      	str	r2, [r3, #32]
 8000996:	4bab      	ldr	r3, [pc, #684]	; (8000c44 <HAL_RCC_OscConfig+0x628>)
 8000998:	6a1a      	ldr	r2, [r3, #32]
 800099a:	4baa      	ldr	r3, [pc, #680]	; (8000c44 <HAL_RCC_OscConfig+0x628>)
 800099c:	2101      	movs	r1, #1
 800099e:	430a      	orrs	r2, r1
 80009a0:	621a      	str	r2, [r3, #32]
 80009a2:	e00b      	b.n	80009bc <HAL_RCC_OscConfig+0x3a0>
 80009a4:	4ba7      	ldr	r3, [pc, #668]	; (8000c44 <HAL_RCC_OscConfig+0x628>)
 80009a6:	6a1a      	ldr	r2, [r3, #32]
 80009a8:	4ba6      	ldr	r3, [pc, #664]	; (8000c44 <HAL_RCC_OscConfig+0x628>)
 80009aa:	2101      	movs	r1, #1
 80009ac:	438a      	bics	r2, r1
 80009ae:	621a      	str	r2, [r3, #32]
 80009b0:	4ba4      	ldr	r3, [pc, #656]	; (8000c44 <HAL_RCC_OscConfig+0x628>)
 80009b2:	6a1a      	ldr	r2, [r3, #32]
 80009b4:	4ba3      	ldr	r3, [pc, #652]	; (8000c44 <HAL_RCC_OscConfig+0x628>)
 80009b6:	2104      	movs	r1, #4
 80009b8:	438a      	bics	r2, r1
 80009ba:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	689b      	ldr	r3, [r3, #8]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d014      	beq.n	80009ee <HAL_RCC_OscConfig+0x3d2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009c4:	f7ff fd6c 	bl	80004a0 <HAL_GetTick>
 80009c8:	0003      	movs	r3, r0
 80009ca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009cc:	e009      	b.n	80009e2 <HAL_RCC_OscConfig+0x3c6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80009ce:	f7ff fd67 	bl	80004a0 <HAL_GetTick>
 80009d2:	0002      	movs	r2, r0
 80009d4:	69bb      	ldr	r3, [r7, #24]
 80009d6:	1ad3      	subs	r3, r2, r3
 80009d8:	4a9b      	ldr	r2, [pc, #620]	; (8000c48 <HAL_RCC_OscConfig+0x62c>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d901      	bls.n	80009e2 <HAL_RCC_OscConfig+0x3c6>
        {
          return HAL_TIMEOUT;
 80009de:	2303      	movs	r3, #3
 80009e0:	e12b      	b.n	8000c3a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009e2:	4b98      	ldr	r3, [pc, #608]	; (8000c44 <HAL_RCC_OscConfig+0x628>)
 80009e4:	6a1b      	ldr	r3, [r3, #32]
 80009e6:	2202      	movs	r2, #2
 80009e8:	4013      	ands	r3, r2
 80009ea:	d0f0      	beq.n	80009ce <HAL_RCC_OscConfig+0x3b2>
 80009ec:	e013      	b.n	8000a16 <HAL_RCC_OscConfig+0x3fa>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80009ee:	f7ff fd57 	bl	80004a0 <HAL_GetTick>
 80009f2:	0003      	movs	r3, r0
 80009f4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80009f6:	e009      	b.n	8000a0c <HAL_RCC_OscConfig+0x3f0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80009f8:	f7ff fd52 	bl	80004a0 <HAL_GetTick>
 80009fc:	0002      	movs	r2, r0
 80009fe:	69bb      	ldr	r3, [r7, #24]
 8000a00:	1ad3      	subs	r3, r2, r3
 8000a02:	4a91      	ldr	r2, [pc, #580]	; (8000c48 <HAL_RCC_OscConfig+0x62c>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d901      	bls.n	8000a0c <HAL_RCC_OscConfig+0x3f0>
        {
          return HAL_TIMEOUT;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	e116      	b.n	8000c3a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a0c:	4b8d      	ldr	r3, [pc, #564]	; (8000c44 <HAL_RCC_OscConfig+0x628>)
 8000a0e:	6a1b      	ldr	r3, [r3, #32]
 8000a10:	2202      	movs	r2, #2
 8000a12:	4013      	ands	r3, r2
 8000a14:	d1f0      	bne.n	80009f8 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000a16:	231f      	movs	r3, #31
 8000a18:	18fb      	adds	r3, r7, r3
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2b01      	cmp	r3, #1
 8000a1e:	d105      	bne.n	8000a2c <HAL_RCC_OscConfig+0x410>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000a20:	4b88      	ldr	r3, [pc, #544]	; (8000c44 <HAL_RCC_OscConfig+0x628>)
 8000a22:	69da      	ldr	r2, [r3, #28]
 8000a24:	4b87      	ldr	r3, [pc, #540]	; (8000c44 <HAL_RCC_OscConfig+0x628>)
 8000a26:	4989      	ldr	r1, [pc, #548]	; (8000c4c <HAL_RCC_OscConfig+0x630>)
 8000a28:	400a      	ands	r2, r1
 8000a2a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2210      	movs	r2, #16
 8000a32:	4013      	ands	r3, r2
 8000a34:	d063      	beq.n	8000afe <HAL_RCC_OscConfig+0x4e2>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	695b      	ldr	r3, [r3, #20]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d12a      	bne.n	8000a94 <HAL_RCC_OscConfig+0x478>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000a3e:	4b81      	ldr	r3, [pc, #516]	; (8000c44 <HAL_RCC_OscConfig+0x628>)
 8000a40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a42:	4b80      	ldr	r3, [pc, #512]	; (8000c44 <HAL_RCC_OscConfig+0x628>)
 8000a44:	2104      	movs	r1, #4
 8000a46:	430a      	orrs	r2, r1
 8000a48:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000a4a:	4b7e      	ldr	r3, [pc, #504]	; (8000c44 <HAL_RCC_OscConfig+0x628>)
 8000a4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a4e:	4b7d      	ldr	r3, [pc, #500]	; (8000c44 <HAL_RCC_OscConfig+0x628>)
 8000a50:	2101      	movs	r1, #1
 8000a52:	430a      	orrs	r2, r1
 8000a54:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a56:	f7ff fd23 	bl	80004a0 <HAL_GetTick>
 8000a5a:	0003      	movs	r3, r0
 8000a5c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000a5e:	e008      	b.n	8000a72 <HAL_RCC_OscConfig+0x456>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000a60:	f7ff fd1e 	bl	80004a0 <HAL_GetTick>
 8000a64:	0002      	movs	r2, r0
 8000a66:	69bb      	ldr	r3, [r7, #24]
 8000a68:	1ad3      	subs	r3, r2, r3
 8000a6a:	2b02      	cmp	r3, #2
 8000a6c:	d901      	bls.n	8000a72 <HAL_RCC_OscConfig+0x456>
        {
          return HAL_TIMEOUT;
 8000a6e:	2303      	movs	r3, #3
 8000a70:	e0e3      	b.n	8000c3a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000a72:	4b74      	ldr	r3, [pc, #464]	; (8000c44 <HAL_RCC_OscConfig+0x628>)
 8000a74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a76:	2202      	movs	r2, #2
 8000a78:	4013      	ands	r3, r2
 8000a7a:	d0f1      	beq.n	8000a60 <HAL_RCC_OscConfig+0x444>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000a7c:	4b71      	ldr	r3, [pc, #452]	; (8000c44 <HAL_RCC_OscConfig+0x628>)
 8000a7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a80:	22f8      	movs	r2, #248	; 0xf8
 8000a82:	4393      	bics	r3, r2
 8000a84:	0019      	movs	r1, r3
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	699b      	ldr	r3, [r3, #24]
 8000a8a:	00da      	lsls	r2, r3, #3
 8000a8c:	4b6d      	ldr	r3, [pc, #436]	; (8000c44 <HAL_RCC_OscConfig+0x628>)
 8000a8e:	430a      	orrs	r2, r1
 8000a90:	635a      	str	r2, [r3, #52]	; 0x34
 8000a92:	e034      	b.n	8000afe <HAL_RCC_OscConfig+0x4e2>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	695b      	ldr	r3, [r3, #20]
 8000a98:	3305      	adds	r3, #5
 8000a9a:	d111      	bne.n	8000ac0 <HAL_RCC_OscConfig+0x4a4>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000a9c:	4b69      	ldr	r3, [pc, #420]	; (8000c44 <HAL_RCC_OscConfig+0x628>)
 8000a9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000aa0:	4b68      	ldr	r3, [pc, #416]	; (8000c44 <HAL_RCC_OscConfig+0x628>)
 8000aa2:	2104      	movs	r1, #4
 8000aa4:	438a      	bics	r2, r1
 8000aa6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000aa8:	4b66      	ldr	r3, [pc, #408]	; (8000c44 <HAL_RCC_OscConfig+0x628>)
 8000aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aac:	22f8      	movs	r2, #248	; 0xf8
 8000aae:	4393      	bics	r3, r2
 8000ab0:	0019      	movs	r1, r3
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	699b      	ldr	r3, [r3, #24]
 8000ab6:	00da      	lsls	r2, r3, #3
 8000ab8:	4b62      	ldr	r3, [pc, #392]	; (8000c44 <HAL_RCC_OscConfig+0x628>)
 8000aba:	430a      	orrs	r2, r1
 8000abc:	635a      	str	r2, [r3, #52]	; 0x34
 8000abe:	e01e      	b.n	8000afe <HAL_RCC_OscConfig+0x4e2>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000ac0:	4b60      	ldr	r3, [pc, #384]	; (8000c44 <HAL_RCC_OscConfig+0x628>)
 8000ac2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ac4:	4b5f      	ldr	r3, [pc, #380]	; (8000c44 <HAL_RCC_OscConfig+0x628>)
 8000ac6:	2104      	movs	r1, #4
 8000ac8:	430a      	orrs	r2, r1
 8000aca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000acc:	4b5d      	ldr	r3, [pc, #372]	; (8000c44 <HAL_RCC_OscConfig+0x628>)
 8000ace:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ad0:	4b5c      	ldr	r3, [pc, #368]	; (8000c44 <HAL_RCC_OscConfig+0x628>)
 8000ad2:	2101      	movs	r1, #1
 8000ad4:	438a      	bics	r2, r1
 8000ad6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ad8:	f7ff fce2 	bl	80004a0 <HAL_GetTick>
 8000adc:	0003      	movs	r3, r0
 8000ade:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000ae0:	e008      	b.n	8000af4 <HAL_RCC_OscConfig+0x4d8>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000ae2:	f7ff fcdd 	bl	80004a0 <HAL_GetTick>
 8000ae6:	0002      	movs	r2, r0
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	1ad3      	subs	r3, r2, r3
 8000aec:	2b02      	cmp	r3, #2
 8000aee:	d901      	bls.n	8000af4 <HAL_RCC_OscConfig+0x4d8>
        {
          return HAL_TIMEOUT;
 8000af0:	2303      	movs	r3, #3
 8000af2:	e0a2      	b.n	8000c3a <HAL_RCC_OscConfig+0x61e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000af4:	4b53      	ldr	r3, [pc, #332]	; (8000c44 <HAL_RCC_OscConfig+0x628>)
 8000af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000af8:	2202      	movs	r2, #2
 8000afa:	4013      	ands	r3, r2
 8000afc:	d1f1      	bne.n	8000ae2 <HAL_RCC_OscConfig+0x4c6>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	6a1b      	ldr	r3, [r3, #32]
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d100      	bne.n	8000b08 <HAL_RCC_OscConfig+0x4ec>
 8000b06:	e097      	b.n	8000c38 <HAL_RCC_OscConfig+0x61c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b08:	4b4e      	ldr	r3, [pc, #312]	; (8000c44 <HAL_RCC_OscConfig+0x628>)
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	220c      	movs	r2, #12
 8000b0e:	4013      	ands	r3, r2
 8000b10:	2b08      	cmp	r3, #8
 8000b12:	d100      	bne.n	8000b16 <HAL_RCC_OscConfig+0x4fa>
 8000b14:	e06b      	b.n	8000bee <HAL_RCC_OscConfig+0x5d2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	6a1b      	ldr	r3, [r3, #32]
 8000b1a:	2b02      	cmp	r3, #2
 8000b1c:	d14c      	bne.n	8000bb8 <HAL_RCC_OscConfig+0x59c>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000b1e:	4b49      	ldr	r3, [pc, #292]	; (8000c44 <HAL_RCC_OscConfig+0x628>)
 8000b20:	681a      	ldr	r2, [r3, #0]
 8000b22:	4b48      	ldr	r3, [pc, #288]	; (8000c44 <HAL_RCC_OscConfig+0x628>)
 8000b24:	494a      	ldr	r1, [pc, #296]	; (8000c50 <HAL_RCC_OscConfig+0x634>)
 8000b26:	400a      	ands	r2, r1
 8000b28:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b2a:	f7ff fcb9 	bl	80004a0 <HAL_GetTick>
 8000b2e:	0003      	movs	r3, r0
 8000b30:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b32:	e008      	b.n	8000b46 <HAL_RCC_OscConfig+0x52a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b34:	f7ff fcb4 	bl	80004a0 <HAL_GetTick>
 8000b38:	0002      	movs	r2, r0
 8000b3a:	69bb      	ldr	r3, [r7, #24]
 8000b3c:	1ad3      	subs	r3, r2, r3
 8000b3e:	2b02      	cmp	r3, #2
 8000b40:	d901      	bls.n	8000b46 <HAL_RCC_OscConfig+0x52a>
          {
            return HAL_TIMEOUT;
 8000b42:	2303      	movs	r3, #3
 8000b44:	e079      	b.n	8000c3a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b46:	4b3f      	ldr	r3, [pc, #252]	; (8000c44 <HAL_RCC_OscConfig+0x628>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	2380      	movs	r3, #128	; 0x80
 8000b4c:	049b      	lsls	r3, r3, #18
 8000b4e:	4013      	ands	r3, r2
 8000b50:	d1f0      	bne.n	8000b34 <HAL_RCC_OscConfig+0x518>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000b52:	4b3c      	ldr	r3, [pc, #240]	; (8000c44 <HAL_RCC_OscConfig+0x628>)
 8000b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b56:	220f      	movs	r2, #15
 8000b58:	4393      	bics	r3, r2
 8000b5a:	0019      	movs	r1, r3
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b60:	4b38      	ldr	r3, [pc, #224]	; (8000c44 <HAL_RCC_OscConfig+0x628>)
 8000b62:	430a      	orrs	r2, r1
 8000b64:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b66:	4b37      	ldr	r3, [pc, #220]	; (8000c44 <HAL_RCC_OscConfig+0x628>)
 8000b68:	685b      	ldr	r3, [r3, #4]
 8000b6a:	4a3a      	ldr	r2, [pc, #232]	; (8000c54 <HAL_RCC_OscConfig+0x638>)
 8000b6c:	4013      	ands	r3, r2
 8000b6e:	0019      	movs	r1, r3
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b78:	431a      	orrs	r2, r3
 8000b7a:	4b32      	ldr	r3, [pc, #200]	; (8000c44 <HAL_RCC_OscConfig+0x628>)
 8000b7c:	430a      	orrs	r2, r1
 8000b7e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000b80:	4b30      	ldr	r3, [pc, #192]	; (8000c44 <HAL_RCC_OscConfig+0x628>)
 8000b82:	681a      	ldr	r2, [r3, #0]
 8000b84:	4b2f      	ldr	r3, [pc, #188]	; (8000c44 <HAL_RCC_OscConfig+0x628>)
 8000b86:	2180      	movs	r1, #128	; 0x80
 8000b88:	0449      	lsls	r1, r1, #17
 8000b8a:	430a      	orrs	r2, r1
 8000b8c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b8e:	f7ff fc87 	bl	80004a0 <HAL_GetTick>
 8000b92:	0003      	movs	r3, r0
 8000b94:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000b96:	e008      	b.n	8000baa <HAL_RCC_OscConfig+0x58e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b98:	f7ff fc82 	bl	80004a0 <HAL_GetTick>
 8000b9c:	0002      	movs	r2, r0
 8000b9e:	69bb      	ldr	r3, [r7, #24]
 8000ba0:	1ad3      	subs	r3, r2, r3
 8000ba2:	2b02      	cmp	r3, #2
 8000ba4:	d901      	bls.n	8000baa <HAL_RCC_OscConfig+0x58e>
          {
            return HAL_TIMEOUT;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	e047      	b.n	8000c3a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000baa:	4b26      	ldr	r3, [pc, #152]	; (8000c44 <HAL_RCC_OscConfig+0x628>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	2380      	movs	r3, #128	; 0x80
 8000bb0:	049b      	lsls	r3, r3, #18
 8000bb2:	4013      	ands	r3, r2
 8000bb4:	d0f0      	beq.n	8000b98 <HAL_RCC_OscConfig+0x57c>
 8000bb6:	e03f      	b.n	8000c38 <HAL_RCC_OscConfig+0x61c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000bb8:	4b22      	ldr	r3, [pc, #136]	; (8000c44 <HAL_RCC_OscConfig+0x628>)
 8000bba:	681a      	ldr	r2, [r3, #0]
 8000bbc:	4b21      	ldr	r3, [pc, #132]	; (8000c44 <HAL_RCC_OscConfig+0x628>)
 8000bbe:	4924      	ldr	r1, [pc, #144]	; (8000c50 <HAL_RCC_OscConfig+0x634>)
 8000bc0:	400a      	ands	r2, r1
 8000bc2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bc4:	f7ff fc6c 	bl	80004a0 <HAL_GetTick>
 8000bc8:	0003      	movs	r3, r0
 8000bca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bcc:	e008      	b.n	8000be0 <HAL_RCC_OscConfig+0x5c4>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bce:	f7ff fc67 	bl	80004a0 <HAL_GetTick>
 8000bd2:	0002      	movs	r2, r0
 8000bd4:	69bb      	ldr	r3, [r7, #24]
 8000bd6:	1ad3      	subs	r3, r2, r3
 8000bd8:	2b02      	cmp	r3, #2
 8000bda:	d901      	bls.n	8000be0 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8000bdc:	2303      	movs	r3, #3
 8000bde:	e02c      	b.n	8000c3a <HAL_RCC_OscConfig+0x61e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000be0:	4b18      	ldr	r3, [pc, #96]	; (8000c44 <HAL_RCC_OscConfig+0x628>)
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	2380      	movs	r3, #128	; 0x80
 8000be6:	049b      	lsls	r3, r3, #18
 8000be8:	4013      	ands	r3, r2
 8000bea:	d1f0      	bne.n	8000bce <HAL_RCC_OscConfig+0x5b2>
 8000bec:	e024      	b.n	8000c38 <HAL_RCC_OscConfig+0x61c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	6a1b      	ldr	r3, [r3, #32]
 8000bf2:	2b01      	cmp	r3, #1
 8000bf4:	d101      	bne.n	8000bfa <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e01f      	b.n	8000c3a <HAL_RCC_OscConfig+0x61e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8000bfa:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <HAL_RCC_OscConfig+0x628>)
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8000c00:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <HAL_RCC_OscConfig+0x628>)
 8000c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c04:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c06:	697a      	ldr	r2, [r7, #20]
 8000c08:	23c0      	movs	r3, #192	; 0xc0
 8000c0a:	025b      	lsls	r3, r3, #9
 8000c0c:	401a      	ands	r2, r3
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c12:	429a      	cmp	r2, r3
 8000c14:	d10e      	bne.n	8000c34 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000c16:	693b      	ldr	r3, [r7, #16]
 8000c18:	220f      	movs	r2, #15
 8000c1a:	401a      	ands	r2, r3
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d107      	bne.n	8000c34 <HAL_RCC_OscConfig+0x618>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8000c24:	697a      	ldr	r2, [r7, #20]
 8000c26:	23f0      	movs	r3, #240	; 0xf0
 8000c28:	039b      	lsls	r3, r3, #14
 8000c2a:	401a      	ands	r2, r3
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d001      	beq.n	8000c38 <HAL_RCC_OscConfig+0x61c>
        {
          return HAL_ERROR;
 8000c34:	2301      	movs	r3, #1
 8000c36:	e000      	b.n	8000c3a <HAL_RCC_OscConfig+0x61e>
        }
      }
    }
  }

  return HAL_OK;
 8000c38:	2300      	movs	r3, #0
}
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	b008      	add	sp, #32
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	40021000 	.word	0x40021000
 8000c48:	00001388 	.word	0x00001388
 8000c4c:	efffffff 	.word	0xefffffff
 8000c50:	feffffff 	.word	0xfeffffff
 8000c54:	ffc27fff 	.word	0xffc27fff

08000c58 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
 8000c60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d101      	bne.n	8000c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	e0b3      	b.n	8000dd4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000c6c:	4b5b      	ldr	r3, [pc, #364]	; (8000ddc <HAL_RCC_ClockConfig+0x184>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2201      	movs	r2, #1
 8000c72:	4013      	ands	r3, r2
 8000c74:	683a      	ldr	r2, [r7, #0]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	d911      	bls.n	8000c9e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c7a:	4b58      	ldr	r3, [pc, #352]	; (8000ddc <HAL_RCC_ClockConfig+0x184>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	2201      	movs	r2, #1
 8000c80:	4393      	bics	r3, r2
 8000c82:	0019      	movs	r1, r3
 8000c84:	4b55      	ldr	r3, [pc, #340]	; (8000ddc <HAL_RCC_ClockConfig+0x184>)
 8000c86:	683a      	ldr	r2, [r7, #0]
 8000c88:	430a      	orrs	r2, r1
 8000c8a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c8c:	4b53      	ldr	r3, [pc, #332]	; (8000ddc <HAL_RCC_ClockConfig+0x184>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2201      	movs	r2, #1
 8000c92:	4013      	ands	r3, r2
 8000c94:	683a      	ldr	r2, [r7, #0]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d001      	beq.n	8000c9e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e09a      	b.n	8000dd4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	2202      	movs	r2, #2
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	d015      	beq.n	8000cd4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	2204      	movs	r2, #4
 8000cae:	4013      	ands	r3, r2
 8000cb0:	d006      	beq.n	8000cc0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8000cb2:	4b4b      	ldr	r3, [pc, #300]	; (8000de0 <HAL_RCC_ClockConfig+0x188>)
 8000cb4:	685a      	ldr	r2, [r3, #4]
 8000cb6:	4b4a      	ldr	r3, [pc, #296]	; (8000de0 <HAL_RCC_ClockConfig+0x188>)
 8000cb8:	21e0      	movs	r1, #224	; 0xe0
 8000cba:	00c9      	lsls	r1, r1, #3
 8000cbc:	430a      	orrs	r2, r1
 8000cbe:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cc0:	4b47      	ldr	r3, [pc, #284]	; (8000de0 <HAL_RCC_ClockConfig+0x188>)
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	22f0      	movs	r2, #240	; 0xf0
 8000cc6:	4393      	bics	r3, r2
 8000cc8:	0019      	movs	r1, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	689a      	ldr	r2, [r3, #8]
 8000cce:	4b44      	ldr	r3, [pc, #272]	; (8000de0 <HAL_RCC_ClockConfig+0x188>)
 8000cd0:	430a      	orrs	r2, r1
 8000cd2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2201      	movs	r2, #1
 8000cda:	4013      	ands	r3, r2
 8000cdc:	d040      	beq.n	8000d60 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d107      	bne.n	8000cf6 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ce6:	4b3e      	ldr	r3, [pc, #248]	; (8000de0 <HAL_RCC_ClockConfig+0x188>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	2380      	movs	r3, #128	; 0x80
 8000cec:	029b      	lsls	r3, r3, #10
 8000cee:	4013      	ands	r3, r2
 8000cf0:	d114      	bne.n	8000d1c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e06e      	b.n	8000dd4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	685b      	ldr	r3, [r3, #4]
 8000cfa:	2b02      	cmp	r3, #2
 8000cfc:	d107      	bne.n	8000d0e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000cfe:	4b38      	ldr	r3, [pc, #224]	; (8000de0 <HAL_RCC_ClockConfig+0x188>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	2380      	movs	r3, #128	; 0x80
 8000d04:	049b      	lsls	r3, r3, #18
 8000d06:	4013      	ands	r3, r2
 8000d08:	d108      	bne.n	8000d1c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	e062      	b.n	8000dd4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d0e:	4b34      	ldr	r3, [pc, #208]	; (8000de0 <HAL_RCC_ClockConfig+0x188>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2202      	movs	r2, #2
 8000d14:	4013      	ands	r3, r2
 8000d16:	d101      	bne.n	8000d1c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8000d18:	2301      	movs	r3, #1
 8000d1a:	e05b      	b.n	8000dd4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d1c:	4b30      	ldr	r3, [pc, #192]	; (8000de0 <HAL_RCC_ClockConfig+0x188>)
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	2203      	movs	r2, #3
 8000d22:	4393      	bics	r3, r2
 8000d24:	0019      	movs	r1, r3
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	685a      	ldr	r2, [r3, #4]
 8000d2a:	4b2d      	ldr	r3, [pc, #180]	; (8000de0 <HAL_RCC_ClockConfig+0x188>)
 8000d2c:	430a      	orrs	r2, r1
 8000d2e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000d30:	f7ff fbb6 	bl	80004a0 <HAL_GetTick>
 8000d34:	0003      	movs	r3, r0
 8000d36:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d38:	e009      	b.n	8000d4e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d3a:	f7ff fbb1 	bl	80004a0 <HAL_GetTick>
 8000d3e:	0002      	movs	r2, r0
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	1ad3      	subs	r3, r2, r3
 8000d44:	4a27      	ldr	r2, [pc, #156]	; (8000de4 <HAL_RCC_ClockConfig+0x18c>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d901      	bls.n	8000d4e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	e042      	b.n	8000dd4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000d4e:	4b24      	ldr	r3, [pc, #144]	; (8000de0 <HAL_RCC_ClockConfig+0x188>)
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	220c      	movs	r2, #12
 8000d54:	401a      	ands	r2, r3
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d1ec      	bne.n	8000d3a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000d60:	4b1e      	ldr	r3, [pc, #120]	; (8000ddc <HAL_RCC_ClockConfig+0x184>)
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2201      	movs	r2, #1
 8000d66:	4013      	ands	r3, r2
 8000d68:	683a      	ldr	r2, [r7, #0]
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d211      	bcs.n	8000d92 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d6e:	4b1b      	ldr	r3, [pc, #108]	; (8000ddc <HAL_RCC_ClockConfig+0x184>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	2201      	movs	r2, #1
 8000d74:	4393      	bics	r3, r2
 8000d76:	0019      	movs	r1, r3
 8000d78:	4b18      	ldr	r3, [pc, #96]	; (8000ddc <HAL_RCC_ClockConfig+0x184>)
 8000d7a:	683a      	ldr	r2, [r7, #0]
 8000d7c:	430a      	orrs	r2, r1
 8000d7e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d80:	4b16      	ldr	r3, [pc, #88]	; (8000ddc <HAL_RCC_ClockConfig+0x184>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2201      	movs	r2, #1
 8000d86:	4013      	ands	r3, r2
 8000d88:	683a      	ldr	r2, [r7, #0]
 8000d8a:	429a      	cmp	r2, r3
 8000d8c:	d001      	beq.n	8000d92 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	e020      	b.n	8000dd4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	2204      	movs	r2, #4
 8000d98:	4013      	ands	r3, r2
 8000d9a:	d009      	beq.n	8000db0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000d9c:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <HAL_RCC_ClockConfig+0x188>)
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	4a11      	ldr	r2, [pc, #68]	; (8000de8 <HAL_RCC_ClockConfig+0x190>)
 8000da2:	4013      	ands	r3, r2
 8000da4:	0019      	movs	r1, r3
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	68da      	ldr	r2, [r3, #12]
 8000daa:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <HAL_RCC_ClockConfig+0x188>)
 8000dac:	430a      	orrs	r2, r1
 8000dae:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000db0:	f000 f820 	bl	8000df4 <HAL_RCC_GetSysClockFreq>
 8000db4:	0001      	movs	r1, r0
 8000db6:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <HAL_RCC_ClockConfig+0x188>)
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	091b      	lsrs	r3, r3, #4
 8000dbc:	220f      	movs	r2, #15
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	4a0a      	ldr	r2, [pc, #40]	; (8000dec <HAL_RCC_ClockConfig+0x194>)
 8000dc2:	5cd3      	ldrb	r3, [r2, r3]
 8000dc4:	000a      	movs	r2, r1
 8000dc6:	40da      	lsrs	r2, r3
 8000dc8:	4b09      	ldr	r3, [pc, #36]	; (8000df0 <HAL_RCC_ClockConfig+0x198>)
 8000dca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000dcc:	2000      	movs	r0, #0
 8000dce:	f7ff fb21 	bl	8000414 <HAL_InitTick>
  
  return HAL_OK;
 8000dd2:	2300      	movs	r3, #0
}
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	b004      	add	sp, #16
 8000dda:	bd80      	pop	{r7, pc}
 8000ddc:	40022000 	.word	0x40022000
 8000de0:	40021000 	.word	0x40021000
 8000de4:	00001388 	.word	0x00001388
 8000de8:	fffff8ff 	.word	0xfffff8ff
 8000dec:	08001530 	.word	0x08001530
 8000df0:	20000000 	.word	0x20000000

08000df4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60bb      	str	r3, [r7, #8]
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
 8000e06:	2300      	movs	r3, #0
 8000e08:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8000e0e:	4b21      	ldr	r3, [pc, #132]	; (8000e94 <HAL_RCC_GetSysClockFreq+0xa0>)
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	220c      	movs	r2, #12
 8000e18:	4013      	ands	r3, r2
 8000e1a:	2b04      	cmp	r3, #4
 8000e1c:	d002      	beq.n	8000e24 <HAL_RCC_GetSysClockFreq+0x30>
 8000e1e:	2b08      	cmp	r3, #8
 8000e20:	d003      	beq.n	8000e2a <HAL_RCC_GetSysClockFreq+0x36>
 8000e22:	e02e      	b.n	8000e82 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000e24:	4b1c      	ldr	r3, [pc, #112]	; (8000e98 <HAL_RCC_GetSysClockFreq+0xa4>)
 8000e26:	613b      	str	r3, [r7, #16]
      break;
 8000e28:	e02e      	b.n	8000e88 <HAL_RCC_GetSysClockFreq+0x94>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	0c9b      	lsrs	r3, r3, #18
 8000e2e:	220f      	movs	r2, #15
 8000e30:	4013      	ands	r3, r2
 8000e32:	4a1a      	ldr	r2, [pc, #104]	; (8000e9c <HAL_RCC_GetSysClockFreq+0xa8>)
 8000e34:	5cd3      	ldrb	r3, [r2, r3]
 8000e36:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000e38:	4b16      	ldr	r3, [pc, #88]	; (8000e94 <HAL_RCC_GetSysClockFreq+0xa0>)
 8000e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e3c:	220f      	movs	r2, #15
 8000e3e:	4013      	ands	r3, r2
 8000e40:	4a17      	ldr	r2, [pc, #92]	; (8000ea0 <HAL_RCC_GetSysClockFreq+0xac>)
 8000e42:	5cd3      	ldrb	r3, [r2, r3]
 8000e44:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000e46:	68fa      	ldr	r2, [r7, #12]
 8000e48:	23c0      	movs	r3, #192	; 0xc0
 8000e4a:	025b      	lsls	r3, r3, #9
 8000e4c:	401a      	ands	r2, r3
 8000e4e:	2380      	movs	r3, #128	; 0x80
 8000e50:	025b      	lsls	r3, r3, #9
 8000e52:	429a      	cmp	r2, r3
 8000e54:	d109      	bne.n	8000e6a <HAL_RCC_GetSysClockFreq+0x76>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000e56:	68b9      	ldr	r1, [r7, #8]
 8000e58:	480f      	ldr	r0, [pc, #60]	; (8000e98 <HAL_RCC_GetSysClockFreq+0xa4>)
 8000e5a:	f7ff f955 	bl	8000108 <__udivsi3>
 8000e5e:	0003      	movs	r3, r0
 8000e60:	001a      	movs	r2, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	4353      	muls	r3, r2
 8000e66:	617b      	str	r3, [r7, #20]
 8000e68:	e008      	b.n	8000e7c <HAL_RCC_GetSysClockFreq+0x88>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000e6a:	68b9      	ldr	r1, [r7, #8]
 8000e6c:	480a      	ldr	r0, [pc, #40]	; (8000e98 <HAL_RCC_GetSysClockFreq+0xa4>)
 8000e6e:	f7ff f94b 	bl	8000108 <__udivsi3>
 8000e72:	0003      	movs	r3, r0
 8000e74:	001a      	movs	r2, r3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4353      	muls	r3, r2
 8000e7a:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	613b      	str	r3, [r7, #16]
      break;
 8000e80:	e002      	b.n	8000e88 <HAL_RCC_GetSysClockFreq+0x94>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000e82:	4b05      	ldr	r3, [pc, #20]	; (8000e98 <HAL_RCC_GetSysClockFreq+0xa4>)
 8000e84:	613b      	str	r3, [r7, #16]
      break;
 8000e86:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8000e88:	693b      	ldr	r3, [r7, #16]
}
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	b006      	add	sp, #24
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	46c0      	nop			; (mov r8, r8)
 8000e94:	40021000 	.word	0x40021000
 8000e98:	007a1200 	.word	0x007a1200
 8000e9c:	08001540 	.word	0x08001540
 8000ea0:	08001550 	.word	0x08001550

08000ea4 <__NVIC_EnableIRQ>:
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	0002      	movs	r2, r0
 8000eac:	1dfb      	adds	r3, r7, #7
 8000eae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000eb0:	1dfb      	adds	r3, r7, #7
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b7f      	cmp	r3, #127	; 0x7f
 8000eb6:	d809      	bhi.n	8000ecc <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000eb8:	1dfb      	adds	r3, r7, #7
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	001a      	movs	r2, r3
 8000ebe:	231f      	movs	r3, #31
 8000ec0:	401a      	ands	r2, r3
 8000ec2:	4b04      	ldr	r3, [pc, #16]	; (8000ed4 <__NVIC_EnableIRQ+0x30>)
 8000ec4:	2101      	movs	r1, #1
 8000ec6:	4091      	lsls	r1, r2
 8000ec8:	000a      	movs	r2, r1
 8000eca:	601a      	str	r2, [r3, #0]
}
 8000ecc:	46c0      	nop			; (mov r8, r8)
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	b002      	add	sp, #8
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	e000e100 	.word	0xe000e100

08000ed8 <__NVIC_SetPriority>:
{
 8000ed8:	b590      	push	{r4, r7, lr}
 8000eda:	b083      	sub	sp, #12
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	0002      	movs	r2, r0
 8000ee0:	6039      	str	r1, [r7, #0]
 8000ee2:	1dfb      	adds	r3, r7, #7
 8000ee4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ee6:	1dfb      	adds	r3, r7, #7
 8000ee8:	781b      	ldrb	r3, [r3, #0]
 8000eea:	2b7f      	cmp	r3, #127	; 0x7f
 8000eec:	d828      	bhi.n	8000f40 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000eee:	4a2f      	ldr	r2, [pc, #188]	; (8000fac <__NVIC_SetPriority+0xd4>)
 8000ef0:	1dfb      	adds	r3, r7, #7
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	b25b      	sxtb	r3, r3
 8000ef6:	089b      	lsrs	r3, r3, #2
 8000ef8:	33c0      	adds	r3, #192	; 0xc0
 8000efa:	009b      	lsls	r3, r3, #2
 8000efc:	589b      	ldr	r3, [r3, r2]
 8000efe:	1dfa      	adds	r2, r7, #7
 8000f00:	7812      	ldrb	r2, [r2, #0]
 8000f02:	0011      	movs	r1, r2
 8000f04:	2203      	movs	r2, #3
 8000f06:	400a      	ands	r2, r1
 8000f08:	00d2      	lsls	r2, r2, #3
 8000f0a:	21ff      	movs	r1, #255	; 0xff
 8000f0c:	4091      	lsls	r1, r2
 8000f0e:	000a      	movs	r2, r1
 8000f10:	43d2      	mvns	r2, r2
 8000f12:	401a      	ands	r2, r3
 8000f14:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	019b      	lsls	r3, r3, #6
 8000f1a:	22ff      	movs	r2, #255	; 0xff
 8000f1c:	401a      	ands	r2, r3
 8000f1e:	1dfb      	adds	r3, r7, #7
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	0018      	movs	r0, r3
 8000f24:	2303      	movs	r3, #3
 8000f26:	4003      	ands	r3, r0
 8000f28:	00db      	lsls	r3, r3, #3
 8000f2a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f2c:	481f      	ldr	r0, [pc, #124]	; (8000fac <__NVIC_SetPriority+0xd4>)
 8000f2e:	1dfb      	adds	r3, r7, #7
 8000f30:	781b      	ldrb	r3, [r3, #0]
 8000f32:	b25b      	sxtb	r3, r3
 8000f34:	089b      	lsrs	r3, r3, #2
 8000f36:	430a      	orrs	r2, r1
 8000f38:	33c0      	adds	r3, #192	; 0xc0
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	501a      	str	r2, [r3, r0]
}
 8000f3e:	e031      	b.n	8000fa4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f40:	4a1b      	ldr	r2, [pc, #108]	; (8000fb0 <__NVIC_SetPriority+0xd8>)
 8000f42:	1dfb      	adds	r3, r7, #7
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	0019      	movs	r1, r3
 8000f48:	230f      	movs	r3, #15
 8000f4a:	400b      	ands	r3, r1
 8000f4c:	3b08      	subs	r3, #8
 8000f4e:	089b      	lsrs	r3, r3, #2
 8000f50:	3306      	adds	r3, #6
 8000f52:	009b      	lsls	r3, r3, #2
 8000f54:	18d3      	adds	r3, r2, r3
 8000f56:	3304      	adds	r3, #4
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	1dfa      	adds	r2, r7, #7
 8000f5c:	7812      	ldrb	r2, [r2, #0]
 8000f5e:	0011      	movs	r1, r2
 8000f60:	2203      	movs	r2, #3
 8000f62:	400a      	ands	r2, r1
 8000f64:	00d2      	lsls	r2, r2, #3
 8000f66:	21ff      	movs	r1, #255	; 0xff
 8000f68:	4091      	lsls	r1, r2
 8000f6a:	000a      	movs	r2, r1
 8000f6c:	43d2      	mvns	r2, r2
 8000f6e:	401a      	ands	r2, r3
 8000f70:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f72:	683b      	ldr	r3, [r7, #0]
 8000f74:	019b      	lsls	r3, r3, #6
 8000f76:	22ff      	movs	r2, #255	; 0xff
 8000f78:	401a      	ands	r2, r3
 8000f7a:	1dfb      	adds	r3, r7, #7
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	0018      	movs	r0, r3
 8000f80:	2303      	movs	r3, #3
 8000f82:	4003      	ands	r3, r0
 8000f84:	00db      	lsls	r3, r3, #3
 8000f86:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f88:	4809      	ldr	r0, [pc, #36]	; (8000fb0 <__NVIC_SetPriority+0xd8>)
 8000f8a:	1dfb      	adds	r3, r7, #7
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	001c      	movs	r4, r3
 8000f90:	230f      	movs	r3, #15
 8000f92:	4023      	ands	r3, r4
 8000f94:	3b08      	subs	r3, #8
 8000f96:	089b      	lsrs	r3, r3, #2
 8000f98:	430a      	orrs	r2, r1
 8000f9a:	3306      	adds	r3, #6
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	18c3      	adds	r3, r0, r3
 8000fa0:	3304      	adds	r3, #4
 8000fa2:	601a      	str	r2, [r3, #0]
}
 8000fa4:	46c0      	nop			; (mov r8, r8)
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	b003      	add	sp, #12
 8000faa:	bd90      	pop	{r4, r7, pc}
 8000fac:	e000e100 	.word	0xe000e100
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <PB4_init>:
 *      Author: ataha
 */
#include "stm32f0xx_hal.h"
#include "pwm.h"

void PB4_init(void) {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000fba:	4b96      	ldr	r3, [pc, #600]	; (8001214 <PB4_init+0x260>)
 8000fbc:	695a      	ldr	r2, [r3, #20]
 8000fbe:	4b95      	ldr	r3, [pc, #596]	; (8001214 <PB4_init+0x260>)
 8000fc0:	2180      	movs	r1, #128	; 0x80
 8000fc2:	02c9      	lsls	r1, r1, #11
 8000fc4:	430a      	orrs	r2, r1
 8000fc6:	615a      	str	r2, [r3, #20]
 8000fc8:	4b92      	ldr	r3, [pc, #584]	; (8001214 <PB4_init+0x260>)
 8000fca:	695a      	ldr	r2, [r3, #20]
 8000fcc:	2380      	movs	r3, #128	; 0x80
 8000fce:	02db      	lsls	r3, r3, #11
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	607b      	str	r3, [r7, #4]
 8000fd4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_TIM3_CLK_ENABLE();
 8000fd6:	4b8f      	ldr	r3, [pc, #572]	; (8001214 <PB4_init+0x260>)
 8000fd8:	69da      	ldr	r2, [r3, #28]
 8000fda:	4b8e      	ldr	r3, [pc, #568]	; (8001214 <PB4_init+0x260>)
 8000fdc:	2102      	movs	r1, #2
 8000fde:	430a      	orrs	r2, r1
 8000fe0:	61da      	str	r2, [r3, #28]
 8000fe2:	4b8c      	ldr	r3, [pc, #560]	; (8001214 <PB4_init+0x260>)
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	2202      	movs	r2, #2
 8000fe8:	4013      	ands	r3, r2
 8000fea:	603b      	str	r3, [r7, #0]
 8000fec:	683b      	ldr	r3, [r7, #0]

	GPIOB->MODER &= ~(GPIO_MODER_MODER4_0);
 8000fee:	4b8a      	ldr	r3, [pc, #552]	; (8001218 <PB4_init+0x264>)
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	4b89      	ldr	r3, [pc, #548]	; (8001218 <PB4_init+0x264>)
 8000ff4:	4989      	ldr	r1, [pc, #548]	; (800121c <PB4_init+0x268>)
 8000ff6:	400a      	ands	r2, r1
 8000ff8:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= GPIO_MODER_MODER4_1;
 8000ffa:	4b87      	ldr	r3, [pc, #540]	; (8001218 <PB4_init+0x264>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	4b86      	ldr	r3, [pc, #536]	; (8001218 <PB4_init+0x264>)
 8001000:	2180      	movs	r1, #128	; 0x80
 8001002:	0089      	lsls	r1, r1, #2
 8001004:	430a      	orrs	r2, r1
 8001006:	601a      	str	r2, [r3, #0]

	GPIOB->OTYPER &= ~(GPIO_OTYPER_OT_4);
 8001008:	4b83      	ldr	r3, [pc, #524]	; (8001218 <PB4_init+0x264>)
 800100a:	685a      	ldr	r2, [r3, #4]
 800100c:	4b82      	ldr	r3, [pc, #520]	; (8001218 <PB4_init+0x264>)
 800100e:	2110      	movs	r1, #16
 8001010:	438a      	bics	r2, r1
 8001012:	605a      	str	r2, [r3, #4]

	GPIOB->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR4_0;
 8001014:	4b80      	ldr	r3, [pc, #512]	; (8001218 <PB4_init+0x264>)
 8001016:	689a      	ldr	r2, [r3, #8]
 8001018:	4b7f      	ldr	r3, [pc, #508]	; (8001218 <PB4_init+0x264>)
 800101a:	2180      	movs	r1, #128	; 0x80
 800101c:	0049      	lsls	r1, r1, #1
 800101e:	430a      	orrs	r2, r1
 8001020:	609a      	str	r2, [r3, #8]
	GPIOB->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR4_1);
 8001022:	4b7d      	ldr	r3, [pc, #500]	; (8001218 <PB4_init+0x264>)
 8001024:	689a      	ldr	r2, [r3, #8]
 8001026:	4b7c      	ldr	r3, [pc, #496]	; (8001218 <PB4_init+0x264>)
 8001028:	497d      	ldr	r1, [pc, #500]	; (8001220 <PB4_init+0x26c>)
 800102a:	400a      	ands	r2, r1
 800102c:	609a      	str	r2, [r3, #8]

	GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPDR4_0);
 800102e:	4b7a      	ldr	r3, [pc, #488]	; (8001218 <PB4_init+0x264>)
 8001030:	68da      	ldr	r2, [r3, #12]
 8001032:	4b79      	ldr	r3, [pc, #484]	; (8001218 <PB4_init+0x264>)
 8001034:	4979      	ldr	r1, [pc, #484]	; (800121c <PB4_init+0x268>)
 8001036:	400a      	ands	r2, r1
 8001038:	60da      	str	r2, [r3, #12]
	GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPDR4_1);
 800103a:	4b77      	ldr	r3, [pc, #476]	; (8001218 <PB4_init+0x264>)
 800103c:	68da      	ldr	r2, [r3, #12]
 800103e:	4b76      	ldr	r3, [pc, #472]	; (8001218 <PB4_init+0x264>)
 8001040:	4977      	ldr	r1, [pc, #476]	; (8001220 <PB4_init+0x26c>)
 8001042:	400a      	ands	r2, r1
 8001044:	60da      	str	r2, [r3, #12]

	GPIOB->AFR[0] |= (1 << 16);
 8001046:	4b74      	ldr	r3, [pc, #464]	; (8001218 <PB4_init+0x264>)
 8001048:	6a1a      	ldr	r2, [r3, #32]
 800104a:	4b73      	ldr	r3, [pc, #460]	; (8001218 <PB4_init+0x264>)
 800104c:	2180      	movs	r1, #128	; 0x80
 800104e:	0249      	lsls	r1, r1, #9
 8001050:	430a      	orrs	r2, r1
 8001052:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[0] &= ~(1 << 17);
 8001054:	4b70      	ldr	r3, [pc, #448]	; (8001218 <PB4_init+0x264>)
 8001056:	6a1a      	ldr	r2, [r3, #32]
 8001058:	4b6f      	ldr	r3, [pc, #444]	; (8001218 <PB4_init+0x264>)
 800105a:	4972      	ldr	r1, [pc, #456]	; (8001224 <PB4_init+0x270>)
 800105c:	400a      	ands	r2, r1
 800105e:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[0] &= ~(1 << 18);
 8001060:	4b6d      	ldr	r3, [pc, #436]	; (8001218 <PB4_init+0x264>)
 8001062:	6a1a      	ldr	r2, [r3, #32]
 8001064:	4b6c      	ldr	r3, [pc, #432]	; (8001218 <PB4_init+0x264>)
 8001066:	4970      	ldr	r1, [pc, #448]	; (8001228 <PB4_init+0x274>)
 8001068:	400a      	ands	r2, r1
 800106a:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[0] &= ~(1 << 19);
 800106c:	4b6a      	ldr	r3, [pc, #424]	; (8001218 <PB4_init+0x264>)
 800106e:	6a1a      	ldr	r2, [r3, #32]
 8001070:	4b69      	ldr	r3, [pc, #420]	; (8001218 <PB4_init+0x264>)
 8001072:	496e      	ldr	r1, [pc, #440]	; (800122c <PB4_init+0x278>)
 8001074:	400a      	ands	r2, r1
 8001076:	621a      	str	r2, [r3, #32]

	GPIOB->MODER &= ~(GPIO_MODER_MODER5_0);
 8001078:	4b67      	ldr	r3, [pc, #412]	; (8001218 <PB4_init+0x264>)
 800107a:	681a      	ldr	r2, [r3, #0]
 800107c:	4b66      	ldr	r3, [pc, #408]	; (8001218 <PB4_init+0x264>)
 800107e:	496c      	ldr	r1, [pc, #432]	; (8001230 <PB4_init+0x27c>)
 8001080:	400a      	ands	r2, r1
 8001082:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= GPIO_MODER_MODER5_1;
 8001084:	4b64      	ldr	r3, [pc, #400]	; (8001218 <PB4_init+0x264>)
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	4b63      	ldr	r3, [pc, #396]	; (8001218 <PB4_init+0x264>)
 800108a:	2180      	movs	r1, #128	; 0x80
 800108c:	0109      	lsls	r1, r1, #4
 800108e:	430a      	orrs	r2, r1
 8001090:	601a      	str	r2, [r3, #0]

	GPIOB->OTYPER &= ~(GPIO_OTYPER_OT_5);
 8001092:	4b61      	ldr	r3, [pc, #388]	; (8001218 <PB4_init+0x264>)
 8001094:	685a      	ldr	r2, [r3, #4]
 8001096:	4b60      	ldr	r3, [pc, #384]	; (8001218 <PB4_init+0x264>)
 8001098:	2120      	movs	r1, #32
 800109a:	438a      	bics	r2, r1
 800109c:	605a      	str	r2, [r3, #4]

	GPIOB->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR5_0;
 800109e:	4b5e      	ldr	r3, [pc, #376]	; (8001218 <PB4_init+0x264>)
 80010a0:	689a      	ldr	r2, [r3, #8]
 80010a2:	4b5d      	ldr	r3, [pc, #372]	; (8001218 <PB4_init+0x264>)
 80010a4:	2180      	movs	r1, #128	; 0x80
 80010a6:	00c9      	lsls	r1, r1, #3
 80010a8:	430a      	orrs	r2, r1
 80010aa:	609a      	str	r2, [r3, #8]
	GPIOB->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR5_1);
 80010ac:	4b5a      	ldr	r3, [pc, #360]	; (8001218 <PB4_init+0x264>)
 80010ae:	689a      	ldr	r2, [r3, #8]
 80010b0:	4b59      	ldr	r3, [pc, #356]	; (8001218 <PB4_init+0x264>)
 80010b2:	4960      	ldr	r1, [pc, #384]	; (8001234 <PB4_init+0x280>)
 80010b4:	400a      	ands	r2, r1
 80010b6:	609a      	str	r2, [r3, #8]

	GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPDR5_0);
 80010b8:	4b57      	ldr	r3, [pc, #348]	; (8001218 <PB4_init+0x264>)
 80010ba:	68da      	ldr	r2, [r3, #12]
 80010bc:	4b56      	ldr	r3, [pc, #344]	; (8001218 <PB4_init+0x264>)
 80010be:	495c      	ldr	r1, [pc, #368]	; (8001230 <PB4_init+0x27c>)
 80010c0:	400a      	ands	r2, r1
 80010c2:	60da      	str	r2, [r3, #12]
	GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPDR5_1);
 80010c4:	4b54      	ldr	r3, [pc, #336]	; (8001218 <PB4_init+0x264>)
 80010c6:	68da      	ldr	r2, [r3, #12]
 80010c8:	4b53      	ldr	r3, [pc, #332]	; (8001218 <PB4_init+0x264>)
 80010ca:	495a      	ldr	r1, [pc, #360]	; (8001234 <PB4_init+0x280>)
 80010cc:	400a      	ands	r2, r1
 80010ce:	60da      	str	r2, [r3, #12]

	GPIOB->AFR[0] |= (1 << 20);
 80010d0:	4b51      	ldr	r3, [pc, #324]	; (8001218 <PB4_init+0x264>)
 80010d2:	6a1a      	ldr	r2, [r3, #32]
 80010d4:	4b50      	ldr	r3, [pc, #320]	; (8001218 <PB4_init+0x264>)
 80010d6:	2180      	movs	r1, #128	; 0x80
 80010d8:	0349      	lsls	r1, r1, #13
 80010da:	430a      	orrs	r2, r1
 80010dc:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[0] &= ~(1 << 21);
 80010de:	4b4e      	ldr	r3, [pc, #312]	; (8001218 <PB4_init+0x264>)
 80010e0:	6a1a      	ldr	r2, [r3, #32]
 80010e2:	4b4d      	ldr	r3, [pc, #308]	; (8001218 <PB4_init+0x264>)
 80010e4:	4954      	ldr	r1, [pc, #336]	; (8001238 <PB4_init+0x284>)
 80010e6:	400a      	ands	r2, r1
 80010e8:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[0] &= ~(1 << 22);
 80010ea:	4b4b      	ldr	r3, [pc, #300]	; (8001218 <PB4_init+0x264>)
 80010ec:	6a1a      	ldr	r2, [r3, #32]
 80010ee:	4b4a      	ldr	r3, [pc, #296]	; (8001218 <PB4_init+0x264>)
 80010f0:	4952      	ldr	r1, [pc, #328]	; (800123c <PB4_init+0x288>)
 80010f2:	400a      	ands	r2, r1
 80010f4:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[0] &= ~(1 << 23);
 80010f6:	4b48      	ldr	r3, [pc, #288]	; (8001218 <PB4_init+0x264>)
 80010f8:	6a1a      	ldr	r2, [r3, #32]
 80010fa:	4b47      	ldr	r3, [pc, #284]	; (8001218 <PB4_init+0x264>)
 80010fc:	4950      	ldr	r1, [pc, #320]	; (8001240 <PB4_init+0x28c>)
 80010fe:	400a      	ands	r2, r1
 8001100:	621a      	str	r2, [r3, #32]

	GPIOB->MODER &= ~(GPIO_MODER_MODER0_0);
 8001102:	4b45      	ldr	r3, [pc, #276]	; (8001218 <PB4_init+0x264>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	4b44      	ldr	r3, [pc, #272]	; (8001218 <PB4_init+0x264>)
 8001108:	2101      	movs	r1, #1
 800110a:	438a      	bics	r2, r1
 800110c:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= GPIO_MODER_MODER0_1;
 800110e:	4b42      	ldr	r3, [pc, #264]	; (8001218 <PB4_init+0x264>)
 8001110:	681a      	ldr	r2, [r3, #0]
 8001112:	4b41      	ldr	r3, [pc, #260]	; (8001218 <PB4_init+0x264>)
 8001114:	2102      	movs	r1, #2
 8001116:	430a      	orrs	r2, r1
 8001118:	601a      	str	r2, [r3, #0]

	GPIOB->OTYPER &= ~(GPIO_OTYPER_OT_0);
 800111a:	4b3f      	ldr	r3, [pc, #252]	; (8001218 <PB4_init+0x264>)
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	4b3e      	ldr	r3, [pc, #248]	; (8001218 <PB4_init+0x264>)
 8001120:	2101      	movs	r1, #1
 8001122:	438a      	bics	r2, r1
 8001124:	605a      	str	r2, [r3, #4]

	GPIOB->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR0_0;
 8001126:	4b3c      	ldr	r3, [pc, #240]	; (8001218 <PB4_init+0x264>)
 8001128:	689a      	ldr	r2, [r3, #8]
 800112a:	4b3b      	ldr	r3, [pc, #236]	; (8001218 <PB4_init+0x264>)
 800112c:	2101      	movs	r1, #1
 800112e:	430a      	orrs	r2, r1
 8001130:	609a      	str	r2, [r3, #8]
	GPIOB->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0_1);
 8001132:	4b39      	ldr	r3, [pc, #228]	; (8001218 <PB4_init+0x264>)
 8001134:	689a      	ldr	r2, [r3, #8]
 8001136:	4b38      	ldr	r3, [pc, #224]	; (8001218 <PB4_init+0x264>)
 8001138:	2102      	movs	r1, #2
 800113a:	438a      	bics	r2, r1
 800113c:	609a      	str	r2, [r3, #8]

	GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPDR0_0);
 800113e:	4b36      	ldr	r3, [pc, #216]	; (8001218 <PB4_init+0x264>)
 8001140:	68da      	ldr	r2, [r3, #12]
 8001142:	4b35      	ldr	r3, [pc, #212]	; (8001218 <PB4_init+0x264>)
 8001144:	2101      	movs	r1, #1
 8001146:	438a      	bics	r2, r1
 8001148:	60da      	str	r2, [r3, #12]
	GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPDR0_1);
 800114a:	4b33      	ldr	r3, [pc, #204]	; (8001218 <PB4_init+0x264>)
 800114c:	68da      	ldr	r2, [r3, #12]
 800114e:	4b32      	ldr	r3, [pc, #200]	; (8001218 <PB4_init+0x264>)
 8001150:	2102      	movs	r1, #2
 8001152:	438a      	bics	r2, r1
 8001154:	60da      	str	r2, [r3, #12]

	GPIOB->AFR[0] |= (1 << 0);
 8001156:	4b30      	ldr	r3, [pc, #192]	; (8001218 <PB4_init+0x264>)
 8001158:	6a1a      	ldr	r2, [r3, #32]
 800115a:	4b2f      	ldr	r3, [pc, #188]	; (8001218 <PB4_init+0x264>)
 800115c:	2101      	movs	r1, #1
 800115e:	430a      	orrs	r2, r1
 8001160:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[0] &= ~(1 << 1);
 8001162:	4b2d      	ldr	r3, [pc, #180]	; (8001218 <PB4_init+0x264>)
 8001164:	6a1a      	ldr	r2, [r3, #32]
 8001166:	4b2c      	ldr	r3, [pc, #176]	; (8001218 <PB4_init+0x264>)
 8001168:	2102      	movs	r1, #2
 800116a:	438a      	bics	r2, r1
 800116c:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[0] &= ~(1 << 2);
 800116e:	4b2a      	ldr	r3, [pc, #168]	; (8001218 <PB4_init+0x264>)
 8001170:	6a1a      	ldr	r2, [r3, #32]
 8001172:	4b29      	ldr	r3, [pc, #164]	; (8001218 <PB4_init+0x264>)
 8001174:	2104      	movs	r1, #4
 8001176:	438a      	bics	r2, r1
 8001178:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[0] &= ~(1 << 3);
 800117a:	4b27      	ldr	r3, [pc, #156]	; (8001218 <PB4_init+0x264>)
 800117c:	6a1a      	ldr	r2, [r3, #32]
 800117e:	4b26      	ldr	r3, [pc, #152]	; (8001218 <PB4_init+0x264>)
 8001180:	2108      	movs	r1, #8
 8001182:	438a      	bics	r2, r1
 8001184:	621a      	str	r2, [r3, #32]

	GPIOB->MODER &= ~(GPIO_MODER_MODER1_0);
 8001186:	4b24      	ldr	r3, [pc, #144]	; (8001218 <PB4_init+0x264>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	4b23      	ldr	r3, [pc, #140]	; (8001218 <PB4_init+0x264>)
 800118c:	2104      	movs	r1, #4
 800118e:	438a      	bics	r2, r1
 8001190:	601a      	str	r2, [r3, #0]
	GPIOB->MODER |= GPIO_MODER_MODER1_1;
 8001192:	4b21      	ldr	r3, [pc, #132]	; (8001218 <PB4_init+0x264>)
 8001194:	681a      	ldr	r2, [r3, #0]
 8001196:	4b20      	ldr	r3, [pc, #128]	; (8001218 <PB4_init+0x264>)
 8001198:	2108      	movs	r1, #8
 800119a:	430a      	orrs	r2, r1
 800119c:	601a      	str	r2, [r3, #0]

	GPIOB->OTYPER &= ~(GPIO_OTYPER_OT_1);
 800119e:	4b1e      	ldr	r3, [pc, #120]	; (8001218 <PB4_init+0x264>)
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	4b1d      	ldr	r3, [pc, #116]	; (8001218 <PB4_init+0x264>)
 80011a4:	2102      	movs	r1, #2
 80011a6:	438a      	bics	r2, r1
 80011a8:	605a      	str	r2, [r3, #4]

	GPIOB->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR1_0;
 80011aa:	4b1b      	ldr	r3, [pc, #108]	; (8001218 <PB4_init+0x264>)
 80011ac:	689a      	ldr	r2, [r3, #8]
 80011ae:	4b1a      	ldr	r3, [pc, #104]	; (8001218 <PB4_init+0x264>)
 80011b0:	2104      	movs	r1, #4
 80011b2:	430a      	orrs	r2, r1
 80011b4:	609a      	str	r2, [r3, #8]
	GPIOB->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR1_1);
 80011b6:	4b18      	ldr	r3, [pc, #96]	; (8001218 <PB4_init+0x264>)
 80011b8:	689a      	ldr	r2, [r3, #8]
 80011ba:	4b17      	ldr	r3, [pc, #92]	; (8001218 <PB4_init+0x264>)
 80011bc:	2108      	movs	r1, #8
 80011be:	438a      	bics	r2, r1
 80011c0:	609a      	str	r2, [r3, #8]

	GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPDR1_0);
 80011c2:	4b15      	ldr	r3, [pc, #84]	; (8001218 <PB4_init+0x264>)
 80011c4:	68da      	ldr	r2, [r3, #12]
 80011c6:	4b14      	ldr	r3, [pc, #80]	; (8001218 <PB4_init+0x264>)
 80011c8:	2104      	movs	r1, #4
 80011ca:	438a      	bics	r2, r1
 80011cc:	60da      	str	r2, [r3, #12]
	GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPDR1_1);
 80011ce:	4b12      	ldr	r3, [pc, #72]	; (8001218 <PB4_init+0x264>)
 80011d0:	68da      	ldr	r2, [r3, #12]
 80011d2:	4b11      	ldr	r3, [pc, #68]	; (8001218 <PB4_init+0x264>)
 80011d4:	2108      	movs	r1, #8
 80011d6:	438a      	bics	r2, r1
 80011d8:	60da      	str	r2, [r3, #12]

	GPIOB->AFR[0] |= (1 << 4);
 80011da:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <PB4_init+0x264>)
 80011dc:	6a1a      	ldr	r2, [r3, #32]
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <PB4_init+0x264>)
 80011e0:	2110      	movs	r1, #16
 80011e2:	430a      	orrs	r2, r1
 80011e4:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[0] &= ~(1 << 5);
 80011e6:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <PB4_init+0x264>)
 80011e8:	6a1a      	ldr	r2, [r3, #32]
 80011ea:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <PB4_init+0x264>)
 80011ec:	2120      	movs	r1, #32
 80011ee:	438a      	bics	r2, r1
 80011f0:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[0] &= ~(1 << 6);
 80011f2:	4b09      	ldr	r3, [pc, #36]	; (8001218 <PB4_init+0x264>)
 80011f4:	6a1a      	ldr	r2, [r3, #32]
 80011f6:	4b08      	ldr	r3, [pc, #32]	; (8001218 <PB4_init+0x264>)
 80011f8:	2140      	movs	r1, #64	; 0x40
 80011fa:	438a      	bics	r2, r1
 80011fc:	621a      	str	r2, [r3, #32]
	GPIOB->AFR[0] &= ~(1 << 7);
 80011fe:	4b06      	ldr	r3, [pc, #24]	; (8001218 <PB4_init+0x264>)
 8001200:	6a1a      	ldr	r2, [r3, #32]
 8001202:	4b05      	ldr	r3, [pc, #20]	; (8001218 <PB4_init+0x264>)
 8001204:	2180      	movs	r1, #128	; 0x80
 8001206:	438a      	bics	r2, r1
 8001208:	621a      	str	r2, [r3, #32]
}
 800120a:	46c0      	nop			; (mov r8, r8)
 800120c:	46bd      	mov	sp, r7
 800120e:	b002      	add	sp, #8
 8001210:	bd80      	pop	{r7, pc}
 8001212:	46c0      	nop			; (mov r8, r8)
 8001214:	40021000 	.word	0x40021000
 8001218:	48000400 	.word	0x48000400
 800121c:	fffffeff 	.word	0xfffffeff
 8001220:	fffffdff 	.word	0xfffffdff
 8001224:	fffdffff 	.word	0xfffdffff
 8001228:	fffbffff 	.word	0xfffbffff
 800122c:	fff7ffff 	.word	0xfff7ffff
 8001230:	fffffbff 	.word	0xfffffbff
 8001234:	fffff7ff 	.word	0xfffff7ff
 8001238:	ffdfffff 	.word	0xffdfffff
 800123c:	ffbfffff 	.word	0xffbfffff
 8001240:	ff7fffff 	.word	0xff7fffff

08001244 <pwm_init>:

void pwm_init(void) {
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
	PB4_init();
 8001248:	f7ff feb4 	bl	8000fb4 <PB4_init>

	TIM3->PSC = 23;
 800124c:	4b68      	ldr	r3, [pc, #416]	; (80013f0 <pwm_init+0x1ac>)
 800124e:	2217      	movs	r2, #23
 8001250:	629a      	str	r2, [r3, #40]	; 0x28
	//TIM3->PSC=48000-1;

	TIM3->ARR = 99;
 8001252:	4b67      	ldr	r3, [pc, #412]	; (80013f0 <pwm_init+0x1ac>)
 8001254:	2263      	movs	r2, #99	; 0x63
 8001256:	62da      	str	r2, [r3, #44]	; 0x2c
	//TIM3->ARR=65534;
//------------------------------------
// Interrupt
	TIM3->DIER |=TIM_DIER_UIE;
 8001258:	4b65      	ldr	r3, [pc, #404]	; (80013f0 <pwm_init+0x1ac>)
 800125a:	68da      	ldr	r2, [r3, #12]
 800125c:	4b64      	ldr	r3, [pc, #400]	; (80013f0 <pwm_init+0x1ac>)
 800125e:	2101      	movs	r1, #1
 8001260:	430a      	orrs	r2, r1
 8001262:	60da      	str	r2, [r3, #12]
	//TIM3->DIER |=TIM_DIER_CC1IE;
	//TIM3->DIER |=TIM_DIER_CC2IE;
	NVIC_EnableIRQ(TIM3_IRQn);
 8001264:	2010      	movs	r0, #16
 8001266:	f7ff fe1d 	bl	8000ea4 <__NVIC_EnableIRQ>
	NVIC_SetPriority(TIM3_IRQn,2);
 800126a:	2102      	movs	r1, #2
 800126c:	2010      	movs	r0, #16
 800126e:	f7ff fe33 	bl	8000ed8 <__NVIC_SetPriority>
//------------------------------------

	TIM3->CCR1 = 0;
 8001272:	4b5f      	ldr	r3, [pc, #380]	; (80013f0 <pwm_init+0x1ac>)
 8001274:	2200      	movs	r2, #0
 8001276:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = 0;
 8001278:	4b5d      	ldr	r3, [pc, #372]	; (80013f0 <pwm_init+0x1ac>)
 800127a:	2200      	movs	r2, #0
 800127c:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR3 = 0;
 800127e:	4b5c      	ldr	r3, [pc, #368]	; (80013f0 <pwm_init+0x1ac>)
 8001280:	2200      	movs	r2, #0
 8001282:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM3->CCR4 = 0;
 8001284:	4b5a      	ldr	r3, [pc, #360]	; (80013f0 <pwm_init+0x1ac>)
 8001286:	2200      	movs	r2, #0
 8001288:	641a      	str	r2, [r3, #64]	; 0x40

	TIM3->CCMR1 &=~(TIM_CCMR1_CC1S_0);
 800128a:	4b59      	ldr	r3, [pc, #356]	; (80013f0 <pwm_init+0x1ac>)
 800128c:	699a      	ldr	r2, [r3, #24]
 800128e:	4b58      	ldr	r3, [pc, #352]	; (80013f0 <pwm_init+0x1ac>)
 8001290:	2101      	movs	r1, #1
 8001292:	438a      	bics	r2, r1
 8001294:	619a      	str	r2, [r3, #24]
	TIM3->CCMR1 &=~(TIM_CCMR1_CC1S_1);
 8001296:	4b56      	ldr	r3, [pc, #344]	; (80013f0 <pwm_init+0x1ac>)
 8001298:	699a      	ldr	r2, [r3, #24]
 800129a:	4b55      	ldr	r3, [pc, #340]	; (80013f0 <pwm_init+0x1ac>)
 800129c:	2102      	movs	r1, #2
 800129e:	438a      	bics	r2, r1
 80012a0:	619a      	str	r2, [r3, #24]

	TIM3->CCMR1 &= ~(TIM_CCMR1_OC1M_0);
 80012a2:	4b53      	ldr	r3, [pc, #332]	; (80013f0 <pwm_init+0x1ac>)
 80012a4:	699a      	ldr	r2, [r3, #24]
 80012a6:	4b52      	ldr	r3, [pc, #328]	; (80013f0 <pwm_init+0x1ac>)
 80012a8:	2110      	movs	r1, #16
 80012aa:	438a      	bics	r2, r1
 80012ac:	619a      	str	r2, [r3, #24]
	TIM3->CCMR1 |= TIM_CCMR1_OC1M_1;
 80012ae:	4b50      	ldr	r3, [pc, #320]	; (80013f0 <pwm_init+0x1ac>)
 80012b0:	699a      	ldr	r2, [r3, #24]
 80012b2:	4b4f      	ldr	r3, [pc, #316]	; (80013f0 <pwm_init+0x1ac>)
 80012b4:	2120      	movs	r1, #32
 80012b6:	430a      	orrs	r2, r1
 80012b8:	619a      	str	r2, [r3, #24]
	TIM3->CCMR1 |= TIM_CCMR1_OC1M_2;
 80012ba:	4b4d      	ldr	r3, [pc, #308]	; (80013f0 <pwm_init+0x1ac>)
 80012bc:	699a      	ldr	r2, [r3, #24]
 80012be:	4b4c      	ldr	r3, [pc, #304]	; (80013f0 <pwm_init+0x1ac>)
 80012c0:	2140      	movs	r1, #64	; 0x40
 80012c2:	430a      	orrs	r2, r1
 80012c4:	619a      	str	r2, [r3, #24]

	TIM3->CCMR1 |= TIM_CCMR1_OC1PE;
 80012c6:	4b4a      	ldr	r3, [pc, #296]	; (80013f0 <pwm_init+0x1ac>)
 80012c8:	699a      	ldr	r2, [r3, #24]
 80012ca:	4b49      	ldr	r3, [pc, #292]	; (80013f0 <pwm_init+0x1ac>)
 80012cc:	2108      	movs	r1, #8
 80012ce:	430a      	orrs	r2, r1
 80012d0:	619a      	str	r2, [r3, #24]
//----------------------------------------

	TIM3->CCMR1 &=~(TIM_CCMR1_CC2S_0);
 80012d2:	4b47      	ldr	r3, [pc, #284]	; (80013f0 <pwm_init+0x1ac>)
 80012d4:	699a      	ldr	r2, [r3, #24]
 80012d6:	4b46      	ldr	r3, [pc, #280]	; (80013f0 <pwm_init+0x1ac>)
 80012d8:	4946      	ldr	r1, [pc, #280]	; (80013f4 <pwm_init+0x1b0>)
 80012da:	400a      	ands	r2, r1
 80012dc:	619a      	str	r2, [r3, #24]
	TIM3->CCMR1 &=~(TIM_CCMR1_CC2S_1);
 80012de:	4b44      	ldr	r3, [pc, #272]	; (80013f0 <pwm_init+0x1ac>)
 80012e0:	699a      	ldr	r2, [r3, #24]
 80012e2:	4b43      	ldr	r3, [pc, #268]	; (80013f0 <pwm_init+0x1ac>)
 80012e4:	4944      	ldr	r1, [pc, #272]	; (80013f8 <pwm_init+0x1b4>)
 80012e6:	400a      	ands	r2, r1
 80012e8:	619a      	str	r2, [r3, #24]

	TIM3->CCMR1 &= ~(TIM_CCMR1_OC2M_0);
 80012ea:	4b41      	ldr	r3, [pc, #260]	; (80013f0 <pwm_init+0x1ac>)
 80012ec:	699a      	ldr	r2, [r3, #24]
 80012ee:	4b40      	ldr	r3, [pc, #256]	; (80013f0 <pwm_init+0x1ac>)
 80012f0:	4942      	ldr	r1, [pc, #264]	; (80013fc <pwm_init+0x1b8>)
 80012f2:	400a      	ands	r2, r1
 80012f4:	619a      	str	r2, [r3, #24]
	TIM3->CCMR1 |= TIM_CCMR1_OC2M_1;
 80012f6:	4b3e      	ldr	r3, [pc, #248]	; (80013f0 <pwm_init+0x1ac>)
 80012f8:	699a      	ldr	r2, [r3, #24]
 80012fa:	4b3d      	ldr	r3, [pc, #244]	; (80013f0 <pwm_init+0x1ac>)
 80012fc:	2180      	movs	r1, #128	; 0x80
 80012fe:	0189      	lsls	r1, r1, #6
 8001300:	430a      	orrs	r2, r1
 8001302:	619a      	str	r2, [r3, #24]
	TIM3->CCMR1 |= TIM_CCMR1_OC2M_2;
 8001304:	4b3a      	ldr	r3, [pc, #232]	; (80013f0 <pwm_init+0x1ac>)
 8001306:	699a      	ldr	r2, [r3, #24]
 8001308:	4b39      	ldr	r3, [pc, #228]	; (80013f0 <pwm_init+0x1ac>)
 800130a:	2180      	movs	r1, #128	; 0x80
 800130c:	01c9      	lsls	r1, r1, #7
 800130e:	430a      	orrs	r2, r1
 8001310:	619a      	str	r2, [r3, #24]

	TIM3->CCMR1 |= TIM_CCMR1_OC2PE;
 8001312:	4b37      	ldr	r3, [pc, #220]	; (80013f0 <pwm_init+0x1ac>)
 8001314:	699a      	ldr	r2, [r3, #24]
 8001316:	4b36      	ldr	r3, [pc, #216]	; (80013f0 <pwm_init+0x1ac>)
 8001318:	2180      	movs	r1, #128	; 0x80
 800131a:	0109      	lsls	r1, r1, #4
 800131c:	430a      	orrs	r2, r1
 800131e:	619a      	str	r2, [r3, #24]
//--------------------------------------------
	TIM3->CCMR2 &=~(TIM_CCMR2_CC3S_0);
 8001320:	4b33      	ldr	r3, [pc, #204]	; (80013f0 <pwm_init+0x1ac>)
 8001322:	69da      	ldr	r2, [r3, #28]
 8001324:	4b32      	ldr	r3, [pc, #200]	; (80013f0 <pwm_init+0x1ac>)
 8001326:	2101      	movs	r1, #1
 8001328:	438a      	bics	r2, r1
 800132a:	61da      	str	r2, [r3, #28]
	TIM3->CCMR2 &=~(TIM_CCMR2_CC3S_1);
 800132c:	4b30      	ldr	r3, [pc, #192]	; (80013f0 <pwm_init+0x1ac>)
 800132e:	69da      	ldr	r2, [r3, #28]
 8001330:	4b2f      	ldr	r3, [pc, #188]	; (80013f0 <pwm_init+0x1ac>)
 8001332:	2102      	movs	r1, #2
 8001334:	438a      	bics	r2, r1
 8001336:	61da      	str	r2, [r3, #28]

	TIM3->CCMR2 &= ~(TIM_CCMR2_OC3M_0);
 8001338:	4b2d      	ldr	r3, [pc, #180]	; (80013f0 <pwm_init+0x1ac>)
 800133a:	69da      	ldr	r2, [r3, #28]
 800133c:	4b2c      	ldr	r3, [pc, #176]	; (80013f0 <pwm_init+0x1ac>)
 800133e:	2110      	movs	r1, #16
 8001340:	438a      	bics	r2, r1
 8001342:	61da      	str	r2, [r3, #28]
	TIM3->CCMR2 |= TIM_CCMR2_OC3M_1;
 8001344:	4b2a      	ldr	r3, [pc, #168]	; (80013f0 <pwm_init+0x1ac>)
 8001346:	69da      	ldr	r2, [r3, #28]
 8001348:	4b29      	ldr	r3, [pc, #164]	; (80013f0 <pwm_init+0x1ac>)
 800134a:	2120      	movs	r1, #32
 800134c:	430a      	orrs	r2, r1
 800134e:	61da      	str	r2, [r3, #28]
	TIM3->CCMR2 |= TIM_CCMR2_OC3M_2;
 8001350:	4b27      	ldr	r3, [pc, #156]	; (80013f0 <pwm_init+0x1ac>)
 8001352:	69da      	ldr	r2, [r3, #28]
 8001354:	4b26      	ldr	r3, [pc, #152]	; (80013f0 <pwm_init+0x1ac>)
 8001356:	2140      	movs	r1, #64	; 0x40
 8001358:	430a      	orrs	r2, r1
 800135a:	61da      	str	r2, [r3, #28]

	TIM3->CCMR2 |= TIM_CCMR2_OC3PE;
 800135c:	4b24      	ldr	r3, [pc, #144]	; (80013f0 <pwm_init+0x1ac>)
 800135e:	69da      	ldr	r2, [r3, #28]
 8001360:	4b23      	ldr	r3, [pc, #140]	; (80013f0 <pwm_init+0x1ac>)
 8001362:	2108      	movs	r1, #8
 8001364:	430a      	orrs	r2, r1
 8001366:	61da      	str	r2, [r3, #28]
//---------------------------------------------
	TIM3->CCMR2 &=~(TIM_CCMR2_CC4S_0);
 8001368:	4b21      	ldr	r3, [pc, #132]	; (80013f0 <pwm_init+0x1ac>)
 800136a:	69da      	ldr	r2, [r3, #28]
 800136c:	4b20      	ldr	r3, [pc, #128]	; (80013f0 <pwm_init+0x1ac>)
 800136e:	4921      	ldr	r1, [pc, #132]	; (80013f4 <pwm_init+0x1b0>)
 8001370:	400a      	ands	r2, r1
 8001372:	61da      	str	r2, [r3, #28]
	TIM3->CCMR2 &=~(TIM_CCMR2_CC4S_1);
 8001374:	4b1e      	ldr	r3, [pc, #120]	; (80013f0 <pwm_init+0x1ac>)
 8001376:	69da      	ldr	r2, [r3, #28]
 8001378:	4b1d      	ldr	r3, [pc, #116]	; (80013f0 <pwm_init+0x1ac>)
 800137a:	491f      	ldr	r1, [pc, #124]	; (80013f8 <pwm_init+0x1b4>)
 800137c:	400a      	ands	r2, r1
 800137e:	61da      	str	r2, [r3, #28]

	TIM3->CCMR2 &= ~(TIM_CCMR2_OC4M_0);
 8001380:	4b1b      	ldr	r3, [pc, #108]	; (80013f0 <pwm_init+0x1ac>)
 8001382:	69da      	ldr	r2, [r3, #28]
 8001384:	4b1a      	ldr	r3, [pc, #104]	; (80013f0 <pwm_init+0x1ac>)
 8001386:	491d      	ldr	r1, [pc, #116]	; (80013fc <pwm_init+0x1b8>)
 8001388:	400a      	ands	r2, r1
 800138a:	61da      	str	r2, [r3, #28]
	TIM3->CCMR2 |= TIM_CCMR2_OC4M_1;
 800138c:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <pwm_init+0x1ac>)
 800138e:	69da      	ldr	r2, [r3, #28]
 8001390:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <pwm_init+0x1ac>)
 8001392:	2180      	movs	r1, #128	; 0x80
 8001394:	0189      	lsls	r1, r1, #6
 8001396:	430a      	orrs	r2, r1
 8001398:	61da      	str	r2, [r3, #28]
	TIM3->CCMR2 |= TIM_CCMR2_OC4M_2;
 800139a:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <pwm_init+0x1ac>)
 800139c:	69da      	ldr	r2, [r3, #28]
 800139e:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <pwm_init+0x1ac>)
 80013a0:	2180      	movs	r1, #128	; 0x80
 80013a2:	01c9      	lsls	r1, r1, #7
 80013a4:	430a      	orrs	r2, r1
 80013a6:	61da      	str	r2, [r3, #28]

	TIM3->CCMR2 |= TIM_CCMR2_OC4PE;
 80013a8:	4b11      	ldr	r3, [pc, #68]	; (80013f0 <pwm_init+0x1ac>)
 80013aa:	69da      	ldr	r2, [r3, #28]
 80013ac:	4b10      	ldr	r3, [pc, #64]	; (80013f0 <pwm_init+0x1ac>)
 80013ae:	2180      	movs	r1, #128	; 0x80
 80013b0:	0109      	lsls	r1, r1, #4
 80013b2:	430a      	orrs	r2, r1
 80013b4:	61da      	str	r2, [r3, #28]
//---------------------------------------------
	//Enable OC1REF and OC2REF OUTPUTS
	TIM3->CCER |= TIM_CCER_CC1E;
 80013b6:	4b0e      	ldr	r3, [pc, #56]	; (80013f0 <pwm_init+0x1ac>)
 80013b8:	6a1a      	ldr	r2, [r3, #32]
 80013ba:	4b0d      	ldr	r3, [pc, #52]	; (80013f0 <pwm_init+0x1ac>)
 80013bc:	2101      	movs	r1, #1
 80013be:	430a      	orrs	r2, r1
 80013c0:	621a      	str	r2, [r3, #32]
	TIM3->CCER |= TIM_CCER_CC2E;
 80013c2:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <pwm_init+0x1ac>)
 80013c4:	6a1a      	ldr	r2, [r3, #32]
 80013c6:	4b0a      	ldr	r3, [pc, #40]	; (80013f0 <pwm_init+0x1ac>)
 80013c8:	2110      	movs	r1, #16
 80013ca:	430a      	orrs	r2, r1
 80013cc:	621a      	str	r2, [r3, #32]
	TIM3->CCER |= TIM_CCER_CC3E;
 80013ce:	4b08      	ldr	r3, [pc, #32]	; (80013f0 <pwm_init+0x1ac>)
 80013d0:	6a1a      	ldr	r2, [r3, #32]
 80013d2:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <pwm_init+0x1ac>)
 80013d4:	2180      	movs	r1, #128	; 0x80
 80013d6:	0049      	lsls	r1, r1, #1
 80013d8:	430a      	orrs	r2, r1
 80013da:	621a      	str	r2, [r3, #32]
	TIM3->CCER |= TIM_CCER_CC4E;
 80013dc:	4b04      	ldr	r3, [pc, #16]	; (80013f0 <pwm_init+0x1ac>)
 80013de:	6a1a      	ldr	r2, [r3, #32]
 80013e0:	4b03      	ldr	r3, [pc, #12]	; (80013f0 <pwm_init+0x1ac>)
 80013e2:	2180      	movs	r1, #128	; 0x80
 80013e4:	0149      	lsls	r1, r1, #5
 80013e6:	430a      	orrs	r2, r1
 80013e8:	621a      	str	r2, [r3, #32]
}
 80013ea:	46c0      	nop			; (mov r8, r8)
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40000400 	.word	0x40000400
 80013f4:	fffffeff 	.word	0xfffffeff
 80013f8:	fffffdff 	.word	0xfffffdff
 80013fc:	ffffefff 	.word	0xffffefff

08001400 <pwm_enable>:

void pwm_enable(void) {
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
	TIM3->CR1 |= TIM_CR1_CEN;
 8001404:	4b07      	ldr	r3, [pc, #28]	; (8001424 <pwm_enable+0x24>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4b06      	ldr	r3, [pc, #24]	; (8001424 <pwm_enable+0x24>)
 800140a:	2101      	movs	r1, #1
 800140c:	430a      	orrs	r2, r1
 800140e:	601a      	str	r2, [r3, #0]
	TIM3->EGR |= TIM_EGR_UG;
 8001410:	4b04      	ldr	r3, [pc, #16]	; (8001424 <pwm_enable+0x24>)
 8001412:	695a      	ldr	r2, [r3, #20]
 8001414:	4b03      	ldr	r3, [pc, #12]	; (8001424 <pwm_enable+0x24>)
 8001416:	2101      	movs	r1, #1
 8001418:	430a      	orrs	r2, r1
 800141a:	615a      	str	r2, [r3, #20]
}
 800141c:	46c0      	nop			; (mov r8, r8)
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	46c0      	nop			; (mov r8, r8)
 8001424:	40000400 	.word	0x40000400

08001428 <led_PC8>:
		TIM3->CCR4 = duty;
		break;
	}
}

void led_PC8(void) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800142e:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <led_PC8+0x84>)
 8001430:	695a      	ldr	r2, [r3, #20]
 8001432:	4b1e      	ldr	r3, [pc, #120]	; (80014ac <led_PC8+0x84>)
 8001434:	2180      	movs	r1, #128	; 0x80
 8001436:	0309      	lsls	r1, r1, #12
 8001438:	430a      	orrs	r2, r1
 800143a:	615a      	str	r2, [r3, #20]
 800143c:	4b1b      	ldr	r3, [pc, #108]	; (80014ac <led_PC8+0x84>)
 800143e:	695a      	ldr	r2, [r3, #20]
 8001440:	2380      	movs	r3, #128	; 0x80
 8001442:	031b      	lsls	r3, r3, #12
 8001444:	4013      	ands	r3, r2
 8001446:	607b      	str	r3, [r7, #4]
 8001448:	687b      	ldr	r3, [r7, #4]

	GPIOC->MODER |=GPIO_MODER_MODER8_0;
 800144a:	4b19      	ldr	r3, [pc, #100]	; (80014b0 <led_PC8+0x88>)
 800144c:	681a      	ldr	r2, [r3, #0]
 800144e:	4b18      	ldr	r3, [pc, #96]	; (80014b0 <led_PC8+0x88>)
 8001450:	2180      	movs	r1, #128	; 0x80
 8001452:	0249      	lsls	r1, r1, #9
 8001454:	430a      	orrs	r2, r1
 8001456:	601a      	str	r2, [r3, #0]
	GPIOC->MODER &=~(GPIO_MODER_MODER8_1);
 8001458:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <led_PC8+0x88>)
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	4b14      	ldr	r3, [pc, #80]	; (80014b0 <led_PC8+0x88>)
 800145e:	4915      	ldr	r1, [pc, #84]	; (80014b4 <led_PC8+0x8c>)
 8001460:	400a      	ands	r2, r1
 8001462:	601a      	str	r2, [r3, #0]

	GPIOC->OTYPER &= ~(GPIO_OTYPER_OT_8);
 8001464:	4b12      	ldr	r3, [pc, #72]	; (80014b0 <led_PC8+0x88>)
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <led_PC8+0x88>)
 800146a:	4913      	ldr	r1, [pc, #76]	; (80014b8 <led_PC8+0x90>)
 800146c:	400a      	ands	r2, r1
 800146e:	605a      	str	r2, [r3, #4]

	GPIOC->OSPEEDR |= GPIO_OSPEEDER_OSPEEDR8_0;
 8001470:	4b0f      	ldr	r3, [pc, #60]	; (80014b0 <led_PC8+0x88>)
 8001472:	689a      	ldr	r2, [r3, #8]
 8001474:	4b0e      	ldr	r3, [pc, #56]	; (80014b0 <led_PC8+0x88>)
 8001476:	2180      	movs	r1, #128	; 0x80
 8001478:	0249      	lsls	r1, r1, #9
 800147a:	430a      	orrs	r2, r1
 800147c:	609a      	str	r2, [r3, #8]
	GPIOC->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR8_1);
 800147e:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <led_PC8+0x88>)
 8001480:	689a      	ldr	r2, [r3, #8]
 8001482:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <led_PC8+0x88>)
 8001484:	490b      	ldr	r1, [pc, #44]	; (80014b4 <led_PC8+0x8c>)
 8001486:	400a      	ands	r2, r1
 8001488:	609a      	str	r2, [r3, #8]

	GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPDR8_0);
 800148a:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <led_PC8+0x88>)
 800148c:	68da      	ldr	r2, [r3, #12]
 800148e:	4b08      	ldr	r3, [pc, #32]	; (80014b0 <led_PC8+0x88>)
 8001490:	490a      	ldr	r1, [pc, #40]	; (80014bc <led_PC8+0x94>)
 8001492:	400a      	ands	r2, r1
 8001494:	60da      	str	r2, [r3, #12]
	GPIOC->PUPDR &= ~(GPIO_PUPDR_PUPDR8_1);
 8001496:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <led_PC8+0x88>)
 8001498:	68da      	ldr	r2, [r3, #12]
 800149a:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <led_PC8+0x88>)
 800149c:	4905      	ldr	r1, [pc, #20]	; (80014b4 <led_PC8+0x8c>)
 800149e:	400a      	ands	r2, r1
 80014a0:	60da      	str	r2, [r3, #12]

	//GPIOC->ODR ^=GPIO_ODR_8;
}
 80014a2:	46c0      	nop			; (mov r8, r8)
 80014a4:	46bd      	mov	sp, r7
 80014a6:	b002      	add	sp, #8
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	46c0      	nop			; (mov r8, r8)
 80014ac:	40021000 	.word	0x40021000
 80014b0:	48000800 	.word	0x48000800
 80014b4:	fffdffff 	.word	0xfffdffff
 80014b8:	fffffeff 	.word	0xfffffeff
 80014bc:	fffeffff 	.word	0xfffeffff

080014c0 <__libc_init_array>:
 80014c0:	b570      	push	{r4, r5, r6, lr}
 80014c2:	2600      	movs	r6, #0
 80014c4:	4d0c      	ldr	r5, [pc, #48]	; (80014f8 <__libc_init_array+0x38>)
 80014c6:	4c0d      	ldr	r4, [pc, #52]	; (80014fc <__libc_init_array+0x3c>)
 80014c8:	1b64      	subs	r4, r4, r5
 80014ca:	10a4      	asrs	r4, r4, #2
 80014cc:	42a6      	cmp	r6, r4
 80014ce:	d109      	bne.n	80014e4 <__libc_init_array+0x24>
 80014d0:	2600      	movs	r6, #0
 80014d2:	f000 f821 	bl	8001518 <_init>
 80014d6:	4d0a      	ldr	r5, [pc, #40]	; (8001500 <__libc_init_array+0x40>)
 80014d8:	4c0a      	ldr	r4, [pc, #40]	; (8001504 <__libc_init_array+0x44>)
 80014da:	1b64      	subs	r4, r4, r5
 80014dc:	10a4      	asrs	r4, r4, #2
 80014de:	42a6      	cmp	r6, r4
 80014e0:	d105      	bne.n	80014ee <__libc_init_array+0x2e>
 80014e2:	bd70      	pop	{r4, r5, r6, pc}
 80014e4:	00b3      	lsls	r3, r6, #2
 80014e6:	58eb      	ldr	r3, [r5, r3]
 80014e8:	4798      	blx	r3
 80014ea:	3601      	adds	r6, #1
 80014ec:	e7ee      	b.n	80014cc <__libc_init_array+0xc>
 80014ee:	00b3      	lsls	r3, r6, #2
 80014f0:	58eb      	ldr	r3, [r5, r3]
 80014f2:	4798      	blx	r3
 80014f4:	3601      	adds	r6, #1
 80014f6:	e7f2      	b.n	80014de <__libc_init_array+0x1e>
 80014f8:	08001560 	.word	0x08001560
 80014fc:	08001560 	.word	0x08001560
 8001500:	08001560 	.word	0x08001560
 8001504:	08001564 	.word	0x08001564

08001508 <memset>:
 8001508:	0003      	movs	r3, r0
 800150a:	1882      	adds	r2, r0, r2
 800150c:	4293      	cmp	r3, r2
 800150e:	d100      	bne.n	8001512 <memset+0xa>
 8001510:	4770      	bx	lr
 8001512:	7019      	strb	r1, [r3, #0]
 8001514:	3301      	adds	r3, #1
 8001516:	e7f9      	b.n	800150c <memset+0x4>

08001518 <_init>:
 8001518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800151a:	46c0      	nop			; (mov r8, r8)
 800151c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800151e:	bc08      	pop	{r3}
 8001520:	469e      	mov	lr, r3
 8001522:	4770      	bx	lr

08001524 <_fini>:
 8001524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001526:	46c0      	nop			; (mov r8, r8)
 8001528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800152a:	bc08      	pop	{r3}
 800152c:	469e      	mov	lr, r3
 800152e:	4770      	bx	lr
